/** Flow domain for pairs of multisets over some element type K */
// TODO: Factor this out into a generic pair construction over CCMs

/** Flow domain definitions */

type K

const top: K
  
type Multiset = Map<K, Int>
  
datatype MultiPair = pair(is: Multiset, ls: Multiset)

function domPlus(p1: MultiPair, p2: MultiPair) returns (p: MultiPair)
{
  pair({ k: K :: p1.is[k] + p2.is[k] }, { k: K :: p1.ls[k] + p2.ls[k] })
}

function domMinus(p1: MultiPair, p2: MultiPair) returns (p: MultiPair)
{
  pair({ k: K :: p1.is[k] - p2.is[k] }, { k: K :: p1.ls[k] - p2.ls[k] })
}

function mapZero() returns (m: Multiset)
{
 { k: K :: 0 }
}

function domZero() returns(p: MultiPair)
{
  pair(mapZero, mapZero)
}

pure predicate domValid(p: MultiPair) {
  forall k1: K :: p.is[k1] >= 0 && p.ls[k1] >= 0 @(noinst k1)
}

/** Show that (MultiPair, domPlus, domMinus, domZero) is a cancellative commutative monoid */

// domZero is unit of domPlus
lemma domZero_unit(p: MultiPair)
  ensures domPlus(p, domZero) == p
{
 pure assert forall k: K :: domPlus(p, domZero).is[k] == p.is[k] with {
   pure assert p.is[k] + domZero.is[k] == p.is[k];
 }

 pure assert forall k: K :: domPlus(p, domZero).ls[k] == p.ls[k] with {
   pure assert p.ls[k] + domZero.ls[k] == p.ls[k];
 }
}

// domPlus is associative
lemma domPlus_assoc(p1: MultiPair, p2: MultiPair, p3: MultiPair)
  ensures domPlus(p1, domPlus(p2, p3)) == domPlus(domPlus(p1, p2), p3)
{
  pure assert forall k: K :: domPlus(p1, domPlus(p2, p3)).is[k] == domPlus(domPlus(p1, p2), p3).is[k] with {
    pure assert p1.is[k] + (p2.is[k] + p3.is[k]) == (p1.is[k] + p2.is[k]) + p3.is[k];
    pure assert p1.is[k] + domPlus(p2, p3).is[k] == domPlus(p1, p2).is[k] + p3.is[k];
  }

  pure assert forall k: K :: domPlus(p1, domPlus(p2, p3)).ls[k] == domPlus(domPlus(p1, p2), p3).ls[k] with {
    pure assert p1.ls[k] + (p2.ls[k] + p3.ls[k]) == (p1.ls[k] + p2.ls[k]) + p3.ls[k];
    pure assert p1.ls[k] + domPlus(p2, p3).ls[k] == domPlus(p1, p2).ls[k] + p3.ls[k];
  }
}

// domPlus is commutative
lemma domPlus_comm(p1: MultiPair, p2: MultiPair)
  ensures domPlus(p1, p2) == domPlus(p2, p1)
{
  pure assert forall k: K :: domPlus(p1, p2).is[k] == domPlus(p2, p1).is[k] with {
    pure assert p1.is[k] + p2.is[k] == p2.is[k] + p1.is[k];
  }
  pure assert forall k: K :: domPlus(p1, p2).ls[k] == domPlus(p2, p1).ls[k] with {
    pure assert p1.ls[k] + p2.ls[k] == p2.ls[k] + p1.ls[k];
  }
}

// domPlus is cancellative
lemma domPlus_canc(p1: MultiPair, p2: MultiPair, p3: MultiPair)
  requires domPlus(p1, p2) == domPlus(p1, p3)
  ensures p2 == p3
{
  pure assert forall k: K :: p1.is[k] + p2.is[k] == p1.is[k] + p3.is[k] with {
    pure assert domPlus(p1, p2).is[k] == domPlus(p1, p3).is[k];
  }
  pure assert forall k: K :: p2.is[k] == p3.is[k] with {
    pure assert p1.is[k] + p2.is[k] == p1.is[k] + p3.is[k];
  }
  pure assert forall k: K :: p1.ls[k] + p2.ls[k] == p1.ls[k] + p3.ls[k] with {
    pure assert domPlus(p1, p2).ls[k] == domPlus(p1, p3).ls[k];
  }
  pure assert forall k: K :: p2.ls[k] == p3.ls[k] with {
    pure assert p1.ls[k] + p2.ls[k] == p1.ls[k] + p3.ls[k];
  }
}

// Validity is preserved by domPlus
lemma domPlus_valid(p1: MultiPair, p2: MultiPair)
  requires domValid(p1) && domValid(p2)
  ensures domValid(domPlus(p1, p2))
{
  pure assert forall k: K :: domPlus(p1, p2).is[k] >= 0 with {
    pure assert p1.is[k] + p2.is[k] >= 0;
  }
  pure assert forall k: K :: domPlus(p1, p2).ls[k] >= 0 with {
    pure assert p1.ls[k] + p2.ls[k] >= 0;
  }
}

// domMinus is partial inverse of domPlus
lemma domMinus_pinv(p1: MultiPair, p2: MultiPair)
  ensures domMinus(domPlus(p1, p2), p1) == p2 
{
  pure assert forall k: K :: domMinus(domPlus(p1, p2), p1).is[k] == p2.is[k] with {
    pure assert (p1.is[k] + p2.is[k]) - p1.is[k] == p2.is[k];
    pure assert domPlus(p1, p2).is[k] - p1.is[k] == p2.is[k];
  }
  pure assert forall k: K :: domMinus(domPlus(p1, p2), p1).ls[k] == p2.ls[k] with {
    pure assert (p1.ls[k] + p2.ls[k]) - p1.ls[k] == p2.ls[k];
    pure assert domPlus(p1, p2).ls[k] - p1.ls[k] == p2.ls[k];
  }
}
