/** Flow domain for multisets over some element type K */

include "flows.spl"
include "multiset-ccm.spl"

type FlowDom = Multiset

/** Lemmas and definitions needed by Coq/Iris */

define in_inset(k, I, n) {
  I.inf[n][k] > 0
}
  
define in_outset(k, I, n) {
  I.out[n][k] > 0
}

define in_outsets(k, I)
{
  exists n: Node :: in_outset(k, I, n)
}

predicate globalinv(root: Node, I: Interface)
{
  root in I.dom
  // Global interface is closed
  && (forall n: Node, k: K :: !(in_outset(k, I, n)))
}



lemma flowint_step(root: Node, I1: Interface, I2: Interface, I: Interface, k: K, n: Node)
  requires I == intComp(I1, I2) && intValid(I)
  requires in_outset(k, I1, n)
  requires globalinv(root, I)
  ensures n in I2.dom
{
  pure assert I1.out[n] != domZero;
  lemma_int_comp_unfold(I1, I2);
  if (n !in I.dom) {
    pure assert I.out[n] == domPlus(I1.out[n], I2.out[n]);
    pure assert I.out[n][k] == I1.out[n][k] + I2.out[n][k];
  }
}