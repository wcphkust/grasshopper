/** {Spec} Flow domain for multisets over some element type K */

include "css.spl"
include "flows.spl"
include "multipair-ccm.spl"

type FlowDom = MultiPair

lemma domMinus_inv(m1: MultiPair, m2: MultiPair)
  ensures m1 == domPlus(m2, domMinus(m1, m2))
{
  pure assert forall k: K :: m1.is[k] == domPlus(m2, domMinus(m1, m2)).is[k] with {
    pure assert m1.is[k] == m2.is[k] + (m1.is[k] - m2.is[k]);
    pure assert m1.is[k] == m2.is[k] + domMinus(m1, m2).is[k];
  }
  pure assert forall k: K :: m1.ls[k] == domPlus(m2, domMinus(m1, m2)).ls[k] with {
    pure assert m1.ls[k] == m2.ls[k] + (m1.ls[k] - m2.ls[k]);
    pure assert m1.ls[k] == m2.ls[k] + domMinus(m1, m2).ls[k];
  } 
}

pure function KS() returns (res: Set<K>)

/* Definitions of predicates used in link template proof in Iris */

define in_inset(k, I, n) {
  I.inf[n].is[k] > 0
}

define in_linkset(k, I, n) {
  I.inf[n].ls[k] > 0
}

define in_outset(k, I, n) {
  I.out[n].is[k] > 0 || I.out[n].ls[k] > 0
}

predicate in_outsets(k: K, I: Interface)
{
  exists y: Node :: in_outset(k, I, y)
}

function keyset(I: Interface, n: Node) returns (res: Set<K>)
{
  { k: K :: in_inset(k, I, n) && !(in_outsets(k, I)) }
}


/* Global invariant \phi that needs to be maintained */
pure predicate globalinv(root: Node, I: Interface) {
    intValid(I)
    && root in I.dom
    && (forall k: K, n: Node :: !(in_outset(k, I, n)))
    && (forall k: K :: k in KS
      ==> in_inset(k, I, root) && in_linkset(k, I, root))
    && (forall k: K, n: Node :: n != root
      ==> !(in_inset(k, I, n) && !(in_linkset(k, I, n))))
}

/* Node-level invariant \gamma that needs to be maintained */
pure predicate nodeinv(n: Node, I: Interface, C: Set<K>) {
   I.dom == {n} // is this needed?
   && (forall k1: K :: in_linkset(k1, I, n) && !(in_outsets(k1, I)) ==> in_inset(k1, I, n))
}