/** B+ tree implementation of the link template for linearizable dictionaries. */

options "-abspreds -simplearrays -propreads -stratify"

include "multipair-flows.spl"
include "array_util.spl"

function keyspace() returns (m: Multiset)
{
  { k: K :: 1 }
}

/** Definition of a node */

struct Node {
  var len: Int;
  var keys: Array<K>;
  var ptrs: Array<Node>;
  var next: Node;
  ghost var indices: Map<Node, Int>;
}

/** Definition of heap representation, hrep */

// Width of the B-trees
const B: Int
axiom B > 1

// Access permissions associated with a B-link tree node x
predicate hrepSpatial(x: Node) {
  acc(x) &*& acc(x.keys) &*& acc(x.ptrs) &*& x.keys.length == 2*B && x.ptrs.length == 2*B
}

// k in edgeset(x, u) for child u
define ks_child(x, u, k)
{
  (x.indices[u] == 0 || !lt(k, x.keys.map[x.indices[u] - 1])) &&
    (x.indices[u] == x.len && x.next == null && lt(k, top) || lt(k, x.keys.map[x.indices[u]]))
}

// k in edgest(x, x.next)
define map_next(x, k)
{
  x.next != null && !lt(k, x.keys[x.len]) && lt(k, top)
}

// The flow map of a B-link tree node x
function edgeFn(x: Node, inflow: Map<Node, FlowDom>)
  returns (res: Map<Node, FlowDom>)
  requires hrepSpatial(x)
{
  { n: Node ::
    0 <= x.indices[n] <= x.len ? pair({ k: K :: ks_child(x, n, k) ? inflow[x].ks[k] : 0}, mapZero) :
    (n == x.next ? pair({ k: K :: map_next(x, k) ? inflow[x].ks[k] : 0}, { k: K :: map_next(x, k) ? inflow[x].ir[k] : 0}) : domZero)
  }
}

// Show that edgeFn is valid if inflow is valid
lemma edgeFn_valid(x: Node, inflow: Map<Node, FlowDom>)
  requires forall n: Node :: domValid(inflow[n])
  ensures forall n: Node :: domValid(edgeFn(x, inflow)[n])
{
  pure assert forall n: Node, k: K :: edgeFn(x, inflow)[n].ks[k] >= 0 with {
    pure assert 0 <= x.indices[n] <= x.len && ks_child(x, n, k) ==> edgeFn(x, inflow)[n].ks[k] == inflow[x].ks[k];
  }
  pure assert forall n: Node, k: K :: edgeFn(x, inflow)[n].ir[k] >= 0 with {
    if (0 <= x.indices[n] <= x.len) {
      pure assert edgeFn(x, inflow)[n].ir[k] == 0;
    } else {
      pure assert n == x.next && map_next(x, k) ==> edgeFn(x, inflow)[n].ir[k] == inflow[x].ir[k];
    }
  }
}

// The outset of a B-link tree node x
function outset(x: Node)
  returns (res: Set<K>)
  requires acc(x)
{
  x.ptrs[0] == null ?
  { k: K :: x.next != null && !lt(k, x.keys[x.len]) && lt(k, top) } :
  { k: K :: lt(k, top) }
}

/* Is this still needed? 
// Show that outset is defined correctly - part 1
lemma outset_correct1(x: Node, Ix: Interface, k: K, y: Node, C: Set<K>)
  requires hrep(x, Ix, C) &*& intValid(Ix)
  requires Ix.out[y].ks[k] >= 1
  pure ensures k in outset(x)
{
}

// Show that outset is defined correctly - part 2
lemma outset_correct2(x: Node, Ix: Interface, k: K, C: Set<K>)
  returns (y: Node)
  requires hrep(x, Ix, C) &*& intValid(Ix)
  requires k in outset(x)
  pure ensures Ix.out[y].ks[k] >= 1
{
  pure assert edgeFn(x, Ix.inf)[y] == Ix.out[y];
  if (x.ptrs[0] == null) { 
    y := x.next;
    return y;
  } else {
    var i: Int := map_find(x.keys.map, 0, x.len, k);
    
    if (i < x.len && k == x.keys.map[i]) {  // map_find finds upper bound, we want lower
      i := i + 1;
    }

    if (i == x.len && x.next != null) {
      if (lt(k, x.keys.map[i])) {
        y := x.ptrs[i];
        return y;
      } else {
        y := x.next;
        return y;
      }
    } else {
      y := x.ptrs[i];
      return y;
    }
    return y;
  }
}
 */

function contents(x: Node) returns (C: Set<K>)
  requires hrepSpatial(x)
  requires 0 <= x.len
{
  x.ptrs[0] == null ? set_of_map(x.keys.map, 0, x.len) : {}
}

/*
// Node abstraction of a B-link tree node x with inflow inff
function nodeabs(x: Node, inff: Map<Node, FlowDom>)
  returns (res: NodeDom)
  requires hrepSpatial(x)
{
  x.ptrs[0] == null ?
    nd(set_of_map(x.keys.map, 0, x.len),
       inrfnC({n: Node :: n != x ? {} : {k: K :: inff[x].ks[k] >= 1 || inff[x].ir[k] >= 1}}, {x})) :
    nd({},
       inrfnC({n: Node :: n != x ? {} : {k: K :: inff[x].ks[k] >= 1 || inff[x].ir[k] >= 1}}, {x}))
}
 */

// Function to compute the interface of a node
function interface(x: Node, inflow: Map<Node, FlowDom>)
  returns (res: Interface)
  requires hrepSpatial(x)
{
  int(inflow, edgeFn(x, inflow), {x})
}

// These are the conditions on the fields of x for abstraction to graph to work
define heapGood(x)
{
  x.next != x && 0 <= x.len < 2*B && (x.next == null ==> x.keys[x.len] == top)
  // Keys are sorted (TODO: internal vs. child?)
  && (forall i: Int, j: Int :: 0 <= i < j <= x.len ==> lt(x.keys[i], x.keys[j]) @(noinst i) @(noinst j))
  // All outgoing pointers are distinct
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len
       ==> x != x.ptrs[i])
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len
       ==> x.ptrs[i] != x.next)
  && (forall i: Int, j: Int :: x.ptrs[0] != null && 0 <= i < j <= x.len
       ==> x.ptrs[i] != x.ptrs[j])
  // Indices of outgoing pointers are stored in x.indices
  && (forall n: Node :: 0 <= x.indices[n] <= x.len ==> x.ptrs.map[x.indices[n]] == n)
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x.indices[x.ptrs.map[i]] == i)
  && (forall n: Node :: -1 <= x.indices[n] <= x.len)
  && (x.ptrs[0] == null ==> (forall n: Node :: x.indices[n] == -1 @(noinst n)))
  && x.indices[x.next] == -1  // TODO these two might be redundant
  && x.indices[x] == -1
  // Internal nodes don't point to null
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x.ptrs[i] != null)
}

// Invariant of a B-link tree node x with flow interface I
define hrep(x, I, C) {
  hrepSpatial(x) &*& heapGood(x) &*& I == interface(x, I.inf) &*& C == contents(x)
}


// The good condition
define searchStrInv(x, I, C) {
    // Contents subsetof keyset
    (forall k1: K :: k1 in C ==> I.inf[x].ks[k1] >= 1)
    && (forall k1: K, y: Node :: k1 !in C || I.out[y].ks[k1] == 0)
    // Edgesets are disjoint
    && (forall k1: K, y: Node, z: Node :: y == z
       || I.out[y].ks[k1] == 0 || I.out[z].ks[k1] == 0)
    // Inreach keyset subsetof inset
    && (forall k1: K :: I.inf[x].ir[k1] >= 1 && k1 !in outset(x)
       ==> I.inf[x].ks[k1] >= 1)
    // TODO: If k âˆˆ inreach, then inreach edgeset is same as normal edgeset (for step)
    //&& (forall k1: K, y: Node :: I.inf[x].ir[k1] >= 1 && I.inf[x].ks[k1] <= 0
    //   && I.out[y].ks[k1] >= 1 ==> I.out[y].ir[k1] >= 1)
    // The node label stores the actual inreach
    //&& I.na.inr.inrdom == {x}
    //&& (forall k: K :: (k in I.na.inr.inrfn[x]) == (I.inf[x].ks[k] >= 1 || I.inf[x].ir[k] >= 1))
}

define node(x, I, C) {
  hrep(x, I, C) &*& searchStrInv(x, I, C)
}

// Show that if query key k is in the keyset of node x than x must be a leaf.
lemma keyset_implies_leaf(x: Node, Ix: Interface, k: K, i: Int, implicit ghost C: Set<K>)
  requires hrep(x, Ix, C) &*& intValid(Ix)
  requires lt(k, top)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.out[y].ks[k] == 0)
  requires (i <= 0 || !lt(k, x.keys[i-1])) && 0 <= i <= x.len
  ensures hrep(x, Ix, C)
  ensures x.ptrs[0] == null  // x is a leaf
{
  if (x.ptrs[0] != null && i < x.len && !lt(k, x.keys[i])) {
    keyset_implies_leaf(x, Ix, k, i + 1);
    return;
  } else {
    if (x.ptrs[0] != null && lt(k, x.keys[i])) {
      pure assert Ix.out[x.ptrs[i]].ks[k] == 0;
    } 
    return;
  }
}

lemma lemma_edgesets_disjoint(x: Node, Ix: Interface, inflow: Map<Node, FlowDom>)
  requires hrepSpatial(x)
  requires heapGood(x)
  requires Ix = interface(x, inflow) &*& intValid(Ix)
  pure ensures forall k: K, y: Node, z: Node :: Ix.out[y].ks[k] != 0 ==> y == z || Ix.out[z].ks[k] == 0 
{
  pure assert forall k: K, y: Node, z: Node :: Ix.out[y].ks[k] != 0 ==> y == z || Ix.out[z].ks[k] == 0 with {
    if (y != z && Ix.out[y].ks[k] != 0) {
      pure assert Ix.out == edgeFn(x, Ix.inf);
      if (Ix.out[z].ks[k] > 0) {
        if (x.next == y || x.next == z) {
          ghost var u: Node;
          if (x.next == y) {
            u := z;
          } else {
            u := y;
          }
        } else if (0 <= x.indices[y] <= x.len && 0 <= x.indices[z] <= x.len) {
          pure assert x.indices[z] == x.indices[y] ==> x.ptrs[x.indices[z]] == y;
        }
      }
    }
  }
}

/*
/** Compute interface */
lemma compute_interface(x: Node, inflow: Map<Node, FlowDom>) returns (Ix: Interface)
  requires wf_inflow(x, inflow)
  requires hrepSpatial(x)
  requires heapGood(x)
  requires (forall k: K :: inflow[x].ir[k] >= 1 && k !in outset(x) ==> inflow[x].ks[k] >= 1)
  requires (forall k: K, y: Node :: inflow[x].ir[k] >= 1 && inflow[x].ks[k] <= 0
    && flowmap(x)[x][y].ks[k] >= 1 ==> flowmap(x)[x][y].ir[k] >= 1)
  requires forall k in nodeabs(x, inflow).contents :: inflow[x].ks[k] >= 1
  ensures hrep(x, Ix) &*& intValid(Ix) &*& Ix.inf == inflow
{
  Ix := interface(x, inflow);

  pure assert forall k: K, y: Node :: k in Ix.na.contents
      ==> Ix.inf[x].ks[k] >= 1 && Ix.fm[x][y].ks[k] == 0
  with {
    if (k in Ix.na.contents) {
      not_in_sorted_seg(x.keys.map, 0, x.len, k);
    }
  }

  lemma_edgesets_disjoint(x, Ix, inflow);

  lemma_int_valid_fold(x, Ix);
}

/** Lemmas needed by Coq */

lemma flowint_inset_step(I: Interface, x: Node, Ix: Interface, y: Node, Iy: Interface, k: K)
  requires Ix.FP == {x} && Iy.FP == {y} && I == intComp(Ix, Iy) && intValid(I)
  requires Ix.inf[x].ks[k] >= 1 && Ix.fm[x][y].ks[k] >= 1 || Ix.inf[x].ir[k] >= 1 && Ix.fm[x][y].ir[k] >= 1
  ensures Iy.inf[y].ks[k] >= 1 || Iy.inf[y].ir[k] >= 1
{
  pure assert true
    && domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k]
    || domMult(Ix.inf[x], Ix.fm[x][y]).ir[k] == Ix.inf[x].ir[k] * Ix.fm[x][y].ir[k];
  pure assert !domEq(domMult(Ix.inf[x], Ix.fm[x][y]), domZero());
  lemma_acyclic_2(x, Ix, y, Iy);
  lemma_int_comp_unfold(x, Ix, y, Iy, I);
  lemma_int_valid_unfold_I(I);
}

lemma flowint_proj(I: Interface, x: Node, Ix: Interface, Iy: Interface, k: K)
  requires I == intComp(Ix, Iy) && intValid(I) && x in Ix.FP
  requires I.inf[x].ks[k] >= 1
  ensures Ix.inf[x].ks[k] >= 1
{
  lemma_proj(x, Ix, Iy, I);
}

lemma flowint_cont(I: Interface, Im: Interface, I1: Interface, m: Node)
  requires I1 == intComp(I, Im) && intValid(I1) && Im == newInt(m)
  ensures I.na.contents == I1.na.contents
{}

lemma flowint_step(I1: Interface, I2: Interface, I: Interface, x: Node, y: Node, k: K)
  requires I == intComp(I1, I2) && intValid(I) && x in I1.FP
  requires forall n: Node, n1: Node :: domEq(I.fm[n][n1], domZero)
  requires I1.fm[x][y].ks[k] >= 1 || I1.fm[x][y].ir[k] >= 1 
  ensures y in I2.FP
{
  lemma_int_valid_unfold_I(I1);
  lemma_step(I1, I2, I, x, y);
}

*/

/** Begin programs */

define emptyInt(x, Ix) {
  Ix.dom == {x} && Ix.inf[x] == domZero
  && (forall y: Node :: Ix.out[y] == domZero)
  //&& Ix.na == nd({}, inrfnC({n: Node :: {}}, {x}))
}

/** Initialize a new root node */
procedure init() returns (x: Node, I: Interface)
  ensures node(x, I, Set<K>()) &*& intValid(I)
{
  x := new Node;
  x.keys := new Array<K>(2*B);
  x.keys[0] := top;
  x.ptrs := new Array<Node>(2*B);
  x.ptrs[0] := null;
  x.len := 0;
  x.next := null;
  x.indices := { n: Node :: -1 };

  ghost var x_inflow := { n: Node :: n == x ? pair(keyspace, keyspace) : domZero };
  
  I := interface(x, x_inflow);
}

/** findNext */
procedure findNext(x: Node, k: K, Ix: Interface, implicit ghost C: Set<K>)
  returns (n: Node)
  requires lt(k, top)
  requires Ix.inf[x].ks[k] >= 1
  requires node(x, Ix, C) &*& intValid(Ix)
  ensures node(x, Ix, C)
  ensures n != null ==> Ix.out[n].ks[k] >= 1
  ensures n == null ==> (forall y: Node :: Ix.out[y].ks[k] == 0)
{
  if (x.ptrs[0] == null) {  // Leaf node
    if (x.next == null) {
      return null;
    }
    if (le(x.keys[x.len], k)) {
      return x.next;
    } else {
      return null;
    }
  }

  var found, i := arr_find(x.keys, x.len, k);

  if (i < x.len && k == x.keys[i]) {  // arr_find finds upper bound, we want lower
    i := i + 1;
  }

  if (i == x.len && x.next != null) {
    if (lt(k, x.keys[i])) {
      n := x.ptrs[i];
      // return n;
    } else {
      n := x.next;
      // return n;
    }
  } else {
    n := x.ptrs[i];
    // return n;
  }
  return n;
}

/** search */
procedure search(x: Node, k: K, Ix: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires node(x, Ix, C) &*& intValid(Ix)
  requires lt(k, top)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.out[y].ks[k] == 0)
  ensures hrep(x, Ix, C)
  ensures intLeq(Ix, Ix1)
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (res == k in C)
{
  keyset_implies_leaf(x, Ix, k, 0);

  var idx: Int;
  res, idx := arr_find(x.keys, x.len, k);

  return true, res, Ix;
}

/** insert */
procedure insert(x: Node, k: K, Ix: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, Ix1: Interface, implicit ghost C1: Set<K>)
  requires node(x, Ix, C) &*& intValid(Ix)
  requires lt(k, top)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.out[y].ks[k] == 0)
  ensures node(x, Ix1, C1)
  ensures intLeq(Ix, Ix1)
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (C1 == C ++ {k} && (res == k !in C))
  ensures !succ ==> C1 == C
{
  keyset_implies_leaf(x, Ix, k, 0);

  if (x.len < 2*B - 1) {
    ghost var m0 := x.keys.map;
    if (x.next != null) {
      x.keys[x.len + 1] := x.keys[x.len];
      set_of_map_equal(m0, x.keys.map, 0, 0, x.len);
    } else {
      x.keys[x.len + 1] := top;
      set_of_map_equal(m0, x.keys.map, 0, 0, x.len);
    }
    ghost var m := x.keys.map;
    var old_len := x.len;

    var idx, new_len := arr_insert(x.keys, k, x.len);
    x.len := new_len;

    map_insert_content_set(m, x.keys.map, idx, k, old_len, new_len);

    Ix1 := interface(x, Ix.inf);

    pure assert intLeq(Ix, Ix1) with {
      pure assert forall n: Node, k1: K :: n !in Ix1.dom ==> Ix.out[n].ks[k1] == Ix1.out[n].ks[k1] && Ix.out[n].ir[k1] == Ix1.out[n].ir[k1] with {
        if (n !in Ix1.dom) {
          pure assert Ix.inf[x].ks[k1] == Ix1.inf[x].ks[k1];
          pure assert Ix.inf[x].ir[k1] == Ix1.inf[x].ir[k1];
        }
      }      
    }
  return true, old_len != new_len, Ix1;
  } else {
    return false, false, Ix;
  }
}

/** delete */
procedure delete(x: Node, k: K, Ix: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, Ix1: Interface, implicit ghost C1: Set<K>)
  requires node(x, Ix, C) &*& intValid(Ix)
  requires lt(k, top)
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.out[y].ks[k] == 0)
  ensures node(x, Ix1, C1)
  ensures intLeq(Ix, Ix1)
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> C1 == C -- {k} && (res == k in C)
  ensures !succ ==> C1 == C
{
  keyset_implies_leaf(x, Ix, k, 0);

  ghost var m := x.keys.map;
  var old_len := x.len;
  
  pure assert set_of_map(x.keys.map, 0, x.len) == C;
  var new_len, idx := arr_delete(x.keys, k, x.len);

  map_delete_content_set(m, x.keys.map, x.len, new_len, idx, k);

  ghost var m1 := x.keys.map;
  x.keys[new_len] := x.keys[x.len];
  set_of_map_equal(m1, x.keys.map, 0, 0, new_len);

  x.len := new_len;
  
  Ix1 := interface(x, Ix.inf);
  
  pure assert intLeq(Ix, Ix1) with {
    pure assert forall n: Node, k1: K :: n !in Ix1.dom ==> Ix.out[n].ks[k1] == Ix1.out[n].ks[k1] && Ix.out[n].ir[k1] == Ix1.out[n].ir[k1] with {
      if (n !in Ix1.dom) {
        pure assert Ix.inf[x].ks[k1] == Ix1.inf[x].ks[k1];
        pure assert Ix.inf[x].ir[k1] == Ix1.inf[x].ir[k1];
      }
    }      
  }
  
  return true, old_len != new_len, Ix1;
}

/** Half split */

procedure half_split(c: Node, x: Node, Ic: Interface, implicit ghost C: Set<K>)
  returns (Ic1: Interface, Ix1: Interface, Icx1: Interface, Cc: Set<K>, Cx: Set<K>)
  requires node(c, Ic, C) &*& hrepSpatial(x)
  requires intValid(Ic)
  requires c.len == 2 * B - 1
  // GC assumption
  requires c.next != x;
  requires (forall i: Int :: 0 <= i <= c.len ==> x != c.ptrs[i]);
  // Follows from x being allocated freshly
  ensures node(c, Ic1, Cc) &*& node(x, Ix1, Cx)
  ensures intValid(Ic1) && intValid(Ix1)
  ensures intComp(Ic1, Ix1) == Icx1 && intLeq(Ic, Icx1)
  ensures C == Cc ++ Cx
{
  var m := (c.len + 1) / 2;

  /*
  x := new Node;

  x.keys := new Array<K>(2*B);

  x.ptrs := new Array<Node>(2*B);
  
  pure assert (forall i: Int :: c.ptrs[0] != null && 0 <= i <= c.len ==> c.ptrs[i] != null) with {
    if (c.ptrs[0] != null && 0 <= i <= c.len)
      pure assert old(c.ptrs[i]) != null;
  }
  pure assert heapGood(c, C);
  */
  
  pure assert Ic.out[x] == domZero with {
    pure assert forall k: K :: Ic.out[x].ks[k] == 0 with {
      pure assert 0 <= c.indices[x] <= c.len ==> c.ptrs.map[c.indices[x]] == x;
    }
  }
  
  if (c.ptrs[0] == null) {  // Leaf
    arr_copy(c.keys, x.keys, m, 0, m);
    x.ptrs[0] := null;
    x.len := m - 1;
    x.next := c.next;
    c.len := m;
    c.next := x;
    
    ghost var x_inflow_ks := { k: K :: !lt(k, c.keys[c.len]) && lt(k, top) ? Ic.inf[c].ks[k] : 0 };
    ghost var x_inflow_ir := { k: K :: !lt(k, c.keys[c.len]) && lt(k, top) ? Ic.inf[c].ir[k] : 0 };
    ghost var x_inflow := { n: Node :: n == x ? pair(x_inflow_ks, x_inflow_ir) : domZero };
    
    c.indices := { n: Node :: -1 };
    x.indices := { n: Node :: -1 };

    Ic1 := interface(c, Ic.inf);
    Cc := set_of_map(c.keys.map, 0, c.len);
    Ix1 := interface(x, x_inflow);
    Cx := set_of_map(x.keys.map, 0, x.len);

    pure assert C = Cc ++ Cx with {
      set_of_map_split(c.keys.map, 0, m, old(c.len));
      map_copy_content_set(c.keys.map, old(x.keys.map), x.keys.map, m, 0, m, 0, m - 1);
    }

    pure assert intValid(Ic1) with {
      edgeFn_valid(c, Ic.inf);
    }

    pure assert searchStrInv(c, Ic1, Cc) with {
      pure assert forall k1: K, y: Node :: k1 !in Cc || Ic1.out[y].ks[k1] == 0 with {
        if (k1 in Cc && Ic1.out[y].ks[k1] != 0) {
          map_find_in_set(c.keys.map, 0, c.len, k1);
        }
      }
    }

    pure assert intValid(Ix1) with {
      pure assert forall n: Node :: domValid(x_inflow[n]) with {
        pure assert forall k1: K :: x_inflow[n].ks[k1] >= 0 && x_inflow[n].ir[k1] >= 0 with {
          pure assert Ic.inf[c].ks[k1] >= 0;
          pure assert Ic.inf[c].ir[k1] >= 0;
        }
      }
      edgeFn_valid(x, x_inflow);
    }

    pure assert searchStrInv(x, Ix1, Cx) with {
      pure assert forall k1: K :: k1 in Cx ==> Ix1.inf[x].ks[k1] >= 1 with {
        if (k1 in Cx) {
          map_find_in_set(x.keys.map, 0, x.len, k1);
          pure assert Ic.inf[c].ks[k1] >= 1;
        }
      }
      pure assert forall k1: K, y: Node :: k1 !in Cx || Ix1.out[y].ks[k1] == 0 with {
        if (k1 in Cx && Ix1.out[y].ks[k1] != 0) {
          map_find_in_set(x.keys.map, 0, x.len, k1);
        }
      }

      pure assert forall k1: K :: Ix1.inf[x].ir[k1] >= 1 && k1 !in outset(x)
        ==> Ix1.inf[x].ks[k1] >= 1 with {
          if (Ix1.inf[x].ir[k1] >= 1 && k1 !in outset(x)) {
            pure assert Ic.inf[c].ir[k1] >= 1;
            pure assert k1 !in old(outset(c));
            pure assert Ic.inf[c].ks[k1] >= 1;
          }
      }

    }

    pure assert intComposable(Ic1, Ix1) with {
      pure assert (forall n: Node :: n in Ix1.dom ==> Ix1.inf[n] == domPlus(Ic1.out[n], domMinus(Ix1.inf[n], Ic1.out[n]))) with {
        if (n in Ix1.dom) domMinus_inv(Ix1.inf[n], Ic1.out[n]);
      }
      
      pure assert (forall n: Node :: n in Ix1.dom ==> domValid(domMinus(Ix1.inf[n], Ic1.out[n]))) with {
        if (n in Ix1.dom) {
          pure assert forall k: K :: domMinus(Ix1.inf[n], Ic1.out[n]).ks[k] >= 0 with {
            pure assert !lt(k, c.keys[c.len]) && lt(k, top) ==> Ix1.inf[n].ks[k] == Ic.inf[c].ks[k];
            pure assert Ix1.inf[n].ks[k] - Ic1.out[n].ks[k] >= 0;
          }
          pure assert forall k: K :: domMinus(Ix1.inf[n], Ic1.out[n]).ir[k] >= 0 with {
            pure assert !lt(k, c.keys[c.len]) && lt(k, top) ==> Ix1.inf[n].ir[k] == Ic.inf[c].ir[k];
            pure assert Ix1.inf[n].ir[k] - Ic1.out[n].ir[k] >= 0;
          }
        }
      }
        
      pure assert (forall n: Node :: n in Ic1.dom ==> domValid(domMinus(Ic1.inf[n], Ix1.out[n]))) with {
        if (n in Ic1.dom) {
          pure assert forall k: K :: domMinus(Ic1.inf[n], Ix1.out[n]).ks[k] >= 0 with {
            pure assert Ic1.inf[n].ks[k] - Ix1.out[n].ks[k] >= 0;
          }
          pure assert forall k: K :: domMinus(Ic1.inf[n], Ix1.out[n]).ir[k] >= 0 with {
            pure assert Ic1.inf[n].ir[k] - Ix1.out[n].ir[k] >= 0;
          }
        }
      }

      pure assert (forall n: Node :: n in Ic1.dom ==> Ic1.inf[n] == domPlus(Ix1.out[n], domMinus(Ic1.inf[n], Ix1.out[n]))) with {
        if (n in Ic1.dom) domMinus_inv(Ic1.inf[n], Ix1.out[n]);
      }
    }    

    lemma_int_comp_fold(Ic1, Ix1);
    Icx1 := intComp(Ic1, Ix1);

    pure assert intLeq(Ic, Icx1) with {
      lemma_int_comp_unfold(Ic1, Ix1);
      pure assert forall n: Node :: n !in Icx1.dom ==> Ic.out[n] == Icx1.out[n] with {
        if (n !in Icx1.dom) {

          pure assert Icx1.out[n] == domPlus(Ic1.out[n], Ix1.out[n]);
          pure assert forall k: K :: Ic.out[n].ks[k] == Icx1.out[n].ks[k] with {
            pure assert Icx1.out[n].ks[k] == Ic1.out[n].ks[k] + Ix1.out[n].ks[k];

            if (!lt(k, c.keys[c.len]) && lt(k, top) && !lt(k, old(c.keys.map[c.len]))) {
              pure assert Ix1.inf[x].ks[k] == Ic.inf[c].ks[k];
            }
          }
          pure assert forall k: K :: Ic.out[n].ir[k] == Icx1.out[n].ir[k] with {
            pure assert Icx1.out[n].ir[k] == Ic1.out[n].ir[k] + Ix1.out[n].ir[k];

            if (!lt(k, c.keys[c.len]) && lt(k, top) && !lt(k, old(c.keys.map[c.len]))) {
              pure assert Ix1.inf[x].ir[k] == Ic.inf[c].ir[k];
            }
          }
        }
      }

      pure assert forall n: Node :: n in Ic.dom ==> Ic.inf[n] == Icx1.inf[n] with {
        if (n in Ic.dom) {
          pure assert Ic1.inf[n] == domPlus(Icx1.inf[n], Ix1.out[n]);
          domZero_unit(Icx1.inf[n]);
        }
      }
    
    }
   
    return Ic1, Ix1, Icx1, Cc, Cx;
    
  } else {  // Internal node
    
    ghost var clen := c.len;
    ghost var cind := c.indices;

    arr_copy(c.keys, x.keys, m, 0, c.len - m + 1);
    arr_copy_node(c.ptrs, x.ptrs, m, 0, c.len - m + 1);
    x.len := m - 1;
    c.len := m - 1;
    x.next := c.next;
    c.next := x;

    ghost var x_inflow_ks := { k: K :: !lt(k, c.keys[c.len]) && lt(k, top) ? Ic.inf[c].ks[k] : 0};
    ghost var x_inflow_ir := { k: K :: !lt(k, c.keys[c.len]) && lt(k, top) ? Ic.inf[c].ir[k] : 0};
    ghost var x_inflow := { n: Node :: n == x ? pair(x_inflow_ks, x_inflow_ir) : domZero };

    
    c.indices := { n: Node :: n != x && 0 <= cind[n] < m ? cind[n] : -1 };
    x.indices := { n: Node :: n != x && m <= cind[n] <= clen ? cind[n] - m : -1 };

    Ic1 := interface(c, Ic.inf);
    Cc := {};
    Ix1 := interface(x, x_inflow);
    Cx := {};

    pure assert intValid(Ic1) with {
      edgeFn_valid(c, Ic.inf);
    }

    pure assert heapGood(c) with {
      pure assert forall n: Node :: 0 <= c.indices[n] <= c.len ==> c.ptrs.map[c.indices[n]] == n with {
        pure assert 0 <= old(c.indices[n]) <= c.len ==> old(c.ptrs.map[c.indices[n]]) == n;
      }
    }
    
    pure assert searchStrInv(c, Ic1, Cc) with {
      lemma_edgesets_disjoint(c, Ic1, Ic.inf);
    }

    pure assert intValid(Ix1) with {
      pure assert forall n: Node :: domValid(x_inflow[n]) with {
        pure assert forall k1: K :: x_inflow[n].ks[k1] >= 0 && x_inflow[n].ir[k1] >= 0 with {
          pure assert Ic.inf[c].ks[k1] >= 0;
          pure assert Ic.inf[c].ir[k1] >= 0;
        }
      }
      edgeFn_valid(x, x_inflow);
    }

    pure assert heapGood(x) with {
      pure assert forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x.indices[x.ptrs.map[i]] == i with {
        if (0 <= i <= x.len) {
          ghost var n := old(c.ptrs.map[m + (i - 0)]);
          pure assert x.ptrs.map[i] == n;
          pure assert cind[n] == m + (i - 0);
          pure assert x.indices[n] == cind[n] - m;
        }
      }

      pure assert forall n: Node :: 0 <= x.indices[n] <= x.len ==> x.ptrs.map[x.indices[n]] == n with {
        pure assert m <= old(c.indices[n]) <= old(c.len) ==> old(c.ptrs.map[c.indices[n]]) == n;
        pure assert m <= old(c.indices[n]) <= old(c.len) ==> x.ptrs.map[old(c.indices[n]) - m] == n;
      }
    }
    
    pure assert searchStrInv(x, Ix1, Cx) with {
      lemma_edgesets_disjoint(x, Ix1, x_inflow);
    }

    pure assert intComposable(Ic1, Ix1) with {
      pure assert (forall n: Node :: n in Ix1.dom ==> Ix1.inf[n] == domPlus(Ic1.out[n], domMinus(Ix1.inf[n], Ic1.out[n]))) with {
        if (n in Ix1.dom) domMinus_inv(Ix1.inf[n], Ic1.out[n]);
      }
      
      pure assert (forall n: Node :: n in Ix1.dom ==> domValid(domMinus(Ix1.inf[n], Ic1.out[n]))) with {
        if (n in Ix1.dom) {
          pure assert forall k: K :: domMinus(Ix1.inf[n], Ic1.out[n]).ks[k] >= 0 with {
            pure assert !lt(k, c.keys[c.len]) && lt(k, top) ==> Ix1.inf[n].ks[k] == Ic.inf[c].ks[k];
            pure assert Ix1.inf[n].ks[k] - Ic1.out[n].ks[k] >= 0;
          }
          pure assert forall k: K :: domMinus(Ix1.inf[n], Ic1.out[n]).ir[k] >= 0 with {
            pure assert !lt(k, c.keys[c.len]) && lt(k, top) ==> Ix1.inf[n].ir[k] == Ic.inf[c].ir[k];
            pure assert Ix1.inf[n].ir[k] - Ic1.out[n].ir[k] >= 0;
          }
        }
      }
        
      pure assert (forall n: Node :: n in Ic1.dom ==> domValid(domMinus(Ic1.inf[n], Ix1.out[n]))) with {
        if (n in Ic1.dom) {
          pure assert forall k: K :: domMinus(Ic1.inf[n], Ix1.out[n]).ks[k] >= 0 with {
            pure assert Ic1.inf[n].ks[k] - Ix1.out[n].ks[k] >= 0;
          }
          pure assert forall k: K :: domMinus(Ic1.inf[n], Ix1.out[n]).ir[k] >= 0 with {
            pure assert Ic1.inf[n].ir[k] - Ix1.out[n].ir[k] >= 0;
          }
        }
      }

      pure assert (forall n: Node :: n in Ic1.dom ==> Ic1.inf[n] == domPlus(Ix1.out[n], domMinus(Ic1.inf[n], Ix1.out[n]))) with {
        if (n in Ic1.dom) domMinus_inv(Ic1.inf[n], Ix1.out[n]);
      }
    }
    
    lemma_int_comp_fold(Ic1, Ix1);
    Icx1 := intComp(Ic1, Ix1);

    pure assert intLeq(Ic, Icx1) with {
      lemma_int_comp_unfold(Ic1, Ix1);

      pure assert forall n1: Node :: n1 !in Icx1.dom ==> Ic.out[n1] == Icx1.out[n1] with {
        if (n1 !in Icx1.dom) {

          pure assert Icx1.out[n1] == domPlus(Ic1.out[n1], Ix1.out[n1]);

          pure assert forall k: K :: Ic.out[n1].ks[k] == Icx1.out[n1].ks[k] &&
          Ic.out[n1].ir[k] == Icx1.out[n1].ir[k] with {
            pure assert Icx1.out[n1].ks[k] == Ic1.out[n1].ks[k] + Ix1.out[n1].ks[k]
                      && Icx1.out[n1].ir[k] == Ic1.out[n1].ir[k] + Ix1.out[n1].ir[k];

            if (0 <= old(c.indices)[n1] <= old(c.len)) {  // n1 was c's child
              if (old(c.indices)[n1] <= c.len) {  // n1 stayed at c
                pure assert c.indices[n1] == old(c.indices)[n1];
                pure assert ks_child(c, n1, k) ==> Ic1.out[n1].ks[k] == Ic.inf[c].ks[k];
              } else {  // n1 moved to x
                pure assert true
                   && x.ptrs.map[x.indices[n1]] == n1
                   && old(c.ptrs.map)[m + x.indices[n1] - 0] == n1
                   && old(c.keys.map)[m + x.indices[n1] - 0] == x.keys.map[x.indices[n1]]
                   && (x.indices[n1] > 0 ==>
                   old(c.keys.map)[m + (x.indices[n1] - 1) - 0] == x.keys.map[x.indices[n1] - 1]);
                pure assert ks_child(x, n1, k) ==> Ix1.out[n1].ks[k] == Ix1.inf[x].ks[k];
                pure assert old(ks_child(c, n1, k)) ==> Ic.out[n1].ks[k] == Ic.inf[c].ks[k];
              }              
            } else if (n1 == old(c.next)) {  // n1 was c's right sibling
              if (!lt(k, c.keys[c.len]) && lt(k, top) && !lt(k, old(c.keys.map[c.len]))) {
                pure assert true
                  && Ix1.inf[x].ks[k] == Ic.inf[c].ks[k]
                  && Ix1.inf[x].ir[k] == Ic.inf[c].ir[k];
              }
            } else {} // there was no edge from n1 to c
          }
        }
      }

      pure assert forall n: Node :: n in Ic.dom ==> Ic.inf[n] == Icx1.inf[n] with {
        if (n in Ic.dom) {
          pure assert Ic1.inf[n] == domPlus(Icx1.inf[n], Ix1.out[n]);
          domZero_unit(Icx1.inf[n]);
        }
      }
    }
    
    return Ic1, Ix1, Icx1, Cc, Cx;
  }
}

/*



/** Full split */

procedure full_split(p: Node, Ip: Interface, ci: Int, c: Node, Ic: Interface,
  Ipc: Interface, x: Node, implicit ghost: Cp: Set<K>, implicit ghost Cc: Set<K>)
  returns (Ip1: Interface, Ic1: Interface)
  requires hrep(p, Ip, Cp) &*& hrep(c, Ic, Cc)
  requires intValid(Ip) && intValid(Ic)
  requires intComp(Ip, Ic) == Ipc && intValid(Ipc)
  requires p.ptrs[0] != null && p.ptrs[ci] == c && 0 <= ci <= p.len && c.next == x
  requires p.len < 2*B - 1 && p.indices[c] == ci
  // Needed to show sortedness, and in range, of p.keys:
  requires ks_child(p, c)[c.keys[c.len]] == 1
  && (ci == 0 || ci > 0 && lt(p.keys[ci - 1], c.keys[c.len]))
  // Nothing == x:
  requires p.next != x && p.indices[x] == -1
  requires Ic.fm[c][p] == domZero  // needed for int_comp_unfold

    ensures hrep(p, Ip1, Cp) &*& hrep(c, Ic1, Cc)
  ensures intValid(Ip1) && intValid(Ic1)
  ensures intComp(Ip1, Ic1) == Ipc
  //ensures Ipc.na.contents == Ipc1.na.contents
{
  //pure assert p != x && c != x;

  //lemma_int_valid_unfold(p, Ip);
  //lemma_int_valid_unfold(c, Ic);
  //lemma_int_valid_unfold_I(Ipc);
  //lemma_int_comp_unfold(p, Ip, c, Ic, Ipc);

  var pind := p.indices;  // TODO why doesn't old(p.indices) work?
  var plen := p.len;

  arr_shift(p.keys, ci, ci + 1, p.len + 1 - ci);
  arr_shift_node(p.ptrs, ci + 1, ci + 2, p.len - ci);

  var k := c.keys[c.len];  // everything >= k goes to x
  ghost var c_inflow_ks := { k1: K :: !lt(k1, k) ? Ic.inf[c].ks[k1] - Ip.inf[p].ks[k1] * Ip.fm[p][c].ks[k1] : Ic.inf[c].ks[k1] };
  ghost var c_inflow := { n: Node :: n == c ? fd(c_inflow_ks, Ic.inf[c].ir) : domZero };
  
  p.keys[ci] := k;
  p.ptrs[ci + 1] := x;
  p.len := p.len + 1;

  p.indices := { n: Node :: n == x ? ci + 1 : (ci + 1 <= pind[n] <= plen ? pind[n] + 1 : pind[n]) };


  pure assert heapGood(c) with {
    pure assert c.indices == old(c.indices);
    pure assert c.ptrs.map == old(c.ptrs.map);
  }

  pure assert heapGood(p) with {
    pure assert (forall i: Int, j: Int :: 0 <= i < j <= p.len ==> lt(p.keys[i], p.keys[j]) @(noinst i) @(noinst j)) with {  // This works, but takes ages
      pure assert ci < i <= p.len ==> p.keys[i] == old(p.keys[ci + (i - (ci + 1))]);
      pure assert ci < j <= p.len ==> p.keys[j] == old(p.keys[ci + (j - (ci + 1))]);
    }
    pure assert forall n: Node :: 0 <= p.indices[n] <= p.len ==> p.ptrs.map[p.indices[n]] == n with {
      pure assert ci + 1 < old(p.indices[n]) <= old(p.len)
        ==> old(p.ptrs.map[p.indices[n]]) == n;
      pure assert ci + 1 < old(p.indices[n]) <= old(p.len)
        ==> p.ptrs[old(p.indices[n]) + 1] == n;
        if (0 <= p.indices[n] < ci + 1) {
        } else if (p.indices[n] == ci + 1) {
        } else if (ci + 1 < p.indices[n] <= p.len) {
          pure assert old(p.indices[n]) == p.indices[n] - 1;
          pure assert p.ptrs.map[p.indices[n]] == old(p.ptrs.map)[p.indices[n] - 1];
        }
    }
    pure assert forall i: Int :: p.ptrs[0] != null && 0 <= i <= p.len ==> p.indices[p.ptrs.map[i]] == i with {
      pure assert ci + 1 < i <= p.len ==> p.ptrs[i] == old(p.ptrs.map)[(ci + 1) + (i - (ci + 2))];
    }
  }

  pure assert (forall k: K, y: Node :: Ip.inf[p].ir[k] >= 1 && Ip.inf[p].ks[k] <= 0
    && flowmap(p)[p][y].ks[k] >= 1 ==> flowmap(p)[p][y].ir[k] >= 1) with {
      if (Ip.inf[p].ir[k] >= 1 && Ip.inf[p].ks[k] <= 0
          && flowmap(p)[p][y].ks[k] >= 1) {
        if (ci + 1 < p.indices[y] <= p.len) {
          pure assert old(p.indices[y]) == p.indices[y] - 1;
          pure assert p.ptrs.map[p.indices[y]] == old(p.ptrs.map)[p.indices[y] - 1];
          pure assert 0 <= p.indices[y] - 1 <= old(p.len);
          //pure assert p.ptrs.map[p.indices[y]] == y;
        }
      }
  }

  Ip1 := compute_interface(p, Ip.inf);

  pure assert (forall k: K :: c_inflow[c].ir[k] >= 1 && k !in outset(c) ==> c_inflow[c].ks[k] >= 1 @(noinst k)) with {
    if (c_inflow[c].ir[k] >= 1 && k !in outset(c)) {
      if (Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k] >= 1 && !lt(k, c.keys[c.len])) {
        pure assert Ic.inf[c].ks[k] - Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k] >= 1;
      }
    }
  }

  pure assert forall k : K :: k in nodeabs(c, c_inflow).contents ==> c_inflow[c].ks[k] >= 1 @(noinst k) with {
    not_in_sorted_seg(c.keys.map, 0, c.len, k);
  }

  pure assert wf_inflow(c, c_inflow) with {
    pure assert forall n: Node, k1: K :: 0 <= c_inflow[n].ks[k1] @(noinst n) @(noinst k1) with {
      pure assert
             Ic.inf[c].ks[k1] == Ipc.inf[c].ks[k1] + domMult(Ip.inf[p], Ip.fm[p][c]).ks[k1]
            && Ic.inf[c].ir[k1] == Ipc.inf[c].ir[k1] + domMult(Ip.inf[p], Ip.fm[p][c]).ir[k1]
            && Ic.inf[c].ks[k1] == Ipc.inf[c].ks[k1] + Ip.inf[p].ks[k1] * Ip.fm[p][c].ks[k1]
            && Ic.inf[c].ir[k1] == Ipc.inf[c].ir[k1] + Ip.inf[p].ir[k1] * Ip.fm[p][c].ir[k1];
      pure assert Ic.inf[c].ks[k1] >= Ip.inf[p].ks[k1] * Ip.fm[p][c].ks[k1];
      if (!lt(k1, k)){
       pure assert 0 <= Ic.inf[c].ks[k1] - Ip.inf[p].ks[k1] * Ip.fm[p][c].ks[k1];
      }
    }
  }
  
  Ic1 := compute_interface(c, c_inflow);

  // pure assume domLeq(domMult(Ip1.inf[p], Ip1.fm[p][c]), Ic1.inf[c]);
  pure assert domLeq(domMult(Ip1.inf[p], Ip1.fm[p][c]), Ic1.inf[c]) with {
    pure assert Ic1.fm == flowmap(c) && Ip1.fm == flowmap(p);
    pure assert forall k: K :: domMult(Ip1.inf[p], Ip1.fm[p][c]).ks[k] <= Ic1.inf[c].ks[k] &&
      domMult(Ip1.inf[p], Ip1.fm[p][c]).ir[k] <= Ic1.inf[c].ir[k] with {
      pure assert
             Ic.inf[c].ks[k] == Ipc.inf[c].ks[k] + domMult(Ip.inf[p], Ip.fm[p][c]).ks[k]
            && Ic.inf[c].ir[k] == Ipc.inf[c].ir[k] + domMult(Ip.inf[p], Ip.fm[p][c]).ir[k]
            && Ic.inf[c].ks[k] == Ipc.inf[c].ks[k] + Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k]
            && Ic.inf[c].ir[k] == Ipc.inf[c].ir[k] + Ip.inf[p].ir[k] * Ip.fm[p][c].ir[k];
      if (ks_child(p, c)[k] >= 1) {
        //pure assert (p.indices[c] == 0 || !lt(k, p.keys.map[p.indices[c] - 1])) &&
        //  (p.indices[c] == p.len && p.next == null && lt(k, top) || lt(k, p.keys.map[p.indices[c]]));
        pure assert ci < p.indices[c] <= p.len
          ==> p.keys.map[p.indices[c]] == old(p.keys.map)[ci + (p.indices[c] - (ci + 1))];
        pure assert ci < p.indices[c] - 1 <= p.len
          ==> p.keys.map[p.indices[c] - 1] == old(p.keys.map)[ci + ((p.indices[c] - 1) - (ci + 1))];
        // pure assert Ip1.inf[p].ks[k] == Ip.inf[p].ks[k] &&  Ip1.inf[p].ir[k] == Ip.inf[p].ir[k];
        pure assert
          Ip1.inf[p].ks[k] * Ip1.fm[p][c].ks[k] <= Ic1.inf[c].ks[k]
          && Ip1.inf[p].ir[k] * Ip1.fm[p][c].ir[k] <= Ic1.inf[c].ir[k]
          && domMult_ks(Ip1.inf[p], Ip1.fm[p][c])[k] <= Ic1.inf[c].ks[k]
          && domMult_ir(Ip1.inf[p], Ip1.fm[p][c])[k] <= Ic1.inf[c].ir[k]
          && domMult(Ip1.inf[p], Ip1.fm[p][c]).ks[k] <= Ic1.inf[c].ks[k]
          && domMult(Ip1.inf[p], Ip1.fm[p][c]).ir[k] <= Ic1.inf[c].ir[k];
      } else {
        pure assert
          Ip1.inf[p].ks[k] * Ip1.fm[p][c].ks[k] <= Ic1.inf[c].ks[k]
          && Ip1.inf[p].ir[k] * Ip1.fm[p][c].ir[k] <= Ic1.inf[c].ir[k]
          && domMult_ks(Ip1.inf[p], Ip1.fm[p][c])[k] <= Ic1.inf[c].ks[k]
          && domMult_ir(Ip1.inf[p], Ip1.fm[p][c])[k] <= Ic1.inf[c].ir[k]
          && domMult(Ip1.inf[p], Ip1.fm[p][c]).ks[k] <= Ic1.inf[c].ks[k]
          && domMult(Ip1.inf[p], Ip1.fm[p][c]).ir[k] <= Ic1.inf[c].ir[k];
      }
    }
  } 
  pure assert Ic1.fm[c][p] == domZero with {
    pure assert forall k: K :: Ic1.fm[c][p].ks[k] == 0 && Ic1.fm[c][p].ir[k] == 0;
  }
  Ipc1 := lemma_int_comp_fold(p, Ip1, c, Ic1);

  lemma_int_comp_unfold(p, Ip1, c, Ic1, Ipc1);
  lemma_int_valid_unfold_I(Ipc1);

  pure assert intEq(Ipc, Ipc1) with {

  pure assert forall z: Node :: domEq(Ipc.inf[z], Ipc1.inf[z]) with {
    pure assert forall k: K ::
      Ipc.inf[z].ks[k] == Ipc1.inf[z].ks[k] && Ipc.inf[z].ir[k] == Ipc1.inf[z].ir[k]
    with {
      pure assert Ic1.fm == flowmap(c) && Ip1.fm == flowmap(p);
      pure assert
        Ip1.inf[p].ks[k] * Ip1.fm[p][c].ks[k] <= Ic1.inf[c].ks[k]
        && Ip1.inf[p].ir[k] * Ip1.fm[p][c].ir[k] <= Ic1.inf[c].ir[k]
        && domMult_ks(Ip1.inf[p], Ip1.fm[p][c])[k] <= Ic1.inf[c].ks[k]
        && domMult_ir(Ip1.inf[p], Ip1.fm[p][c])[k] <= Ic1.inf[c].ir[k]
        && domMult(Ip1.inf[p], Ip1.fm[p][c]).ks[k] <= Ic1.inf[c].ks[k]
        && domMult(Ip1.inf[p], Ip1.fm[p][c]).ir[k] <= Ic1.inf[c].ir[k];
      pure assert true
        && Ic.inf[c].ks[k] == Ipc.inf[c].ks[k] + domMult(Ip.inf[p], Ip.fm[p][c]).ks[k]
        && Ic.inf[c].ir[k] == Ipc.inf[c].ir[k] + domMult(Ip.inf[p], Ip.fm[p][c]).ir[k]
        && Ic.inf[c].ks[k] == Ipc.inf[c].ks[k] + Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k]
        && Ic.inf[c].ir[k] == Ipc.inf[c].ir[k] + Ip.inf[p].ir[k] * Ip.fm[p][c].ir[k]
        && Ic1.inf[c].ks[k] == Ipc1.inf[c].ks[k] + Ip1.inf[p].ks[k] * Ip1.fm[p][c].ks[k]
        && Ic1.inf[c].ir[k] == Ipc1.inf[c].ir[k] + Ip1.inf[p].ir[k] * Ip1.fm[p][c].ir[k];
      if (ks_child(p, c)[k] >= 1) {
        pure assert ci < p.indices[c] <= p.len
          ==> p.keys.map[p.indices[c]] == old(p.keys.map)[ci + (p.indices[c] - (ci + 1))];
        pure assert ci < p.indices[c] - 1 <= p.len
          ==> p.keys.map[p.indices[c] - 1] == old(p.keys.map)[ci + ((p.indices[c] - 1) - (ci + 1))];
      } else {
        pure assert !lt(k, c.keys[c.len]) ==> Ic1.inf[c].ks[k] == Ic.inf[c].ks[k] - Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k];
      }
    }
  }

  pure assert forall n: Node, n1: Node ::
    n in Ipc.FP && n1 !in Ipc.FP ==>
      domEq(domMult(Ipc.inf[n], Ipc.fm[n][n1]), domMult(Ipc1.inf[n], Ipc1.fm[n][n1]))
    with {
    if (n in Ipc.FP && n1 !in Ipc.FP) {
      pure assert forall k: K ::
        domMult(Ipc.inf[n], Ipc.fm[n][n1]).ks[k] == domMult(Ipc1.inf[n], Ipc1.fm[n][n1]).ks[k]
        && domMult(Ipc.inf[n], Ipc.fm[n][n1]).ir[k] == domMult(Ipc1.inf[n], Ipc1.fm[n][n1]).ir[k]
        && Ipc.inf[n].ks[k] * Ipc.fm[n][n1].ks[k] == Ipc1.inf[n].ks[k] * Ipc1.fm[n][n1].ks[k]
        && Ipc.inf[n].ir[k] * Ipc.fm[n][n1].ir[k] == Ipc1.inf[n].ir[k] * Ipc1.fm[n][n1].ir[k]
        with {
        // Old and new inflow equations (only for c though)
        pure assert Ic.inf[c].ks[k] == Ipc.inf[c].ks[k] + domMult(Ip.inf[p], Ip.fm[p][c]).ks[k]
          && Ic.inf[c].ir[k] == Ipc.inf[c].ir[k] + domMult(Ip.inf[p], Ip.fm[p][c]).ir[k]
          && Ic.inf[c].ks[k] == Ipc.inf[c].ks[k] + Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k]
          && Ic.inf[c].ir[k] == Ipc.inf[c].ir[k] + Ip.inf[p].ir[k] * Ip.fm[p][c].ir[k]
          && Ic1.inf[c].ks[k] == Ipc1.inf[c].ks[k] + Ip1.inf[p].ks[k] * Ip1.fm[p][c].ks[k]
          && Ic1.inf[c].ir[k] == Ipc1.inf[c].ir[k] + Ip1.inf[p].ir[k] * Ip1.fm[p][c].ir[k];

        // Old flow map equation
        pure assert
          Ipc.fm[p][n1] == domPlus(Ip.fm[p][n1], domMult(Ip.fm[p][c], Ic.fm[c][n1]))
          && Ipc.fm[p][n1].ks[k] == Ip.fm[p][n1].ks[k] + domMult(Ip.fm[p][c], Ic.fm[c][n1]).ks[k]
          && Ipc.fm[p][n1].ir[k] == Ip.fm[p][n1].ir[k] + domMult(Ip.fm[p][c], Ic.fm[c][n1]).ir[k]
          && Ipc.fm[p][n1].ks[k] == Ip.fm[p][n1].ks[k] + Ip.fm[p][c].ks[k] * Ic.fm[c][n1].ks[k]
          && Ipc.fm[p][n1].ir[k] == Ip.fm[p][n1].ir[k] + Ip.fm[p][c].ir[k] * Ic.fm[c][n1].ir[k];

        // New flow map equation
        pure assert
          Ipc1.fm[p][n1] == domPlus(Ip1.fm[p][n1], domMult(Ip1.fm[p][c], Ic1.fm[c][n1]))
          && Ipc1.fm[p][n1].ks[k] == Ip1.fm[p][n1].ks[k] + domMult(Ip1.fm[p][c], Ic1.fm[c][n1]).ks[k]
          && Ipc1.fm[p][n1].ir[k] == Ip1.fm[p][n1].ir[k] + domMult(Ip1.fm[p][c], Ic1.fm[c][n1]).ir[k]
          && Ipc1.fm[p][n1].ks[k] == Ip1.fm[p][n1].ks[k] + Ip1.fm[p][c].ks[k] * Ic1.fm[c][n1].ks[k]
          && Ipc1.fm[p][n1].ir[k] == Ip1.fm[p][n1].ir[k] + Ip1.fm[p][c].ir[k] * Ic1.fm[c][n1].ir[k];

        pure assert !lt(k, c.keys[c.len]) ==> Ic1.inf[c].ks[k] == Ic.inf[c].ks[k] - Ip.inf[p].ks[k] * Ip.fm[p][c].ks[k];
          
        pure assert Ipc.inf[c].ks[k] * Ipc.fm[c][n1].ks[k] == Ipc1.inf[c].ks[k] * Ipc1.fm[c][n1].ks[k]; // OK

        if (ks_child(p, n1)[k] >= 1) {
          pure assert ci < p.indices[n1] <= p.len
            ==> p.keys.map[p.indices[n1]] == old(p.keys.map)[ci + (p.indices[n1] - (ci + 1))];
          pure assert ci < p.indices[c] - 1 <= p.len
            ==> p.keys.map[p.indices[n1] - 1] == old(p.keys.map)[ci + ((p.indices[n1] - 1) - (ci + 1))];

        } 

        pure assert Ipc.inf[p].ks[k] * Ipc.fm[p][n1].ks[k] == Ipc1.inf[p].ks[k] * Ipc1.fm[p][n1].ks[k]; 
          
      }
    }
  }

  }
  
  //pure assert Ipc.na.contents == Ipc1.na.contents;
  
  return Ip1, Ic1;
}

*/