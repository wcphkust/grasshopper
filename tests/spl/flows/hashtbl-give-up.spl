/** Hash table implementation of the give-up template for linearizable dictionaries. */

options "-simplearrays -propreads -abspreds -stratify"

include "give-up.spl"
include "array_util.spl"

/** {Spec} Definition of keyspace */

pure function KS() returns (res: Set<K>)
{
  { k : K :: true }
}


/** Definition of a node */

datatype NodeType = root | bucket | nodeTop;

struct Node {
  var len: Int;
  var bkts: Array<Node>;
  var keys: Array<K>;
  var next: Node;
  var rangeLb: K;
  var rangeUb: K;
  ghost var typ: NodeType;
}

function hash(x: Node, k: K) returns (i: Int)

/** {Spec} Definition of heap representation, hrep */

function edgeFn(x: Node, y: Node, p1: FlowDom)
  returns (p: FlowDom)
  requires acc(x)
{
  { k: K ::
    y != null
    && (  x.typ == root && x.bkts[hash(x, k)] == y
    || x.typ == bucket && x.next == y) ?
    p1[k] : 0}
}

define hrepSpatial(x) {
  acc(x) &*& acc(x.bkts)  &*& acc(x.keys)
}

define hrep(x, I, C) {
  hrepSpatial(x) &*& I.dom == {x}
  && 0 <= x.len && x.len < x.keys.length
    //&& (forall y : Node :: I.out[y] == edgeFn(x, y, I.inf[x]))
    && ((x.typ == root
        && (forall i: Int :: 0 <= i && i < x.bkts.length ==> x.bkts[i] != null && x.bkts[i] != x)
        && (forall y: Node, k1: K :: x != y && y == x.bkts[hash(x, k1)] ==> I.out[y][k1] == I.inf[x][k1])
        && (forall y: Node, k1: K :: x == y || y != x.bkts[hash(x, k1)] ==> I.out[y][k1] == 0)
        && (forall k1: K :: 0 <= hash(x, k1) && hash(x, k1) < x.bkts.length)
        && (forall k1: K :: I.inf[x][k1] == 1) /* && k in outset(x, I.fm)*/
        && (C == {}))
     || (x.typ == bucket
        && x.next != x
        // The keys are within the range
        && (x.len != 0 ==> le(x.rangeLb, x.keys[0]) && lt(x.keys[x.len-1], x.rangeUb))
        // The range defines the inset
        && (forall k1: K :: I.inf[x][k1] == 1 && le(x.rangeLb, k1) && lt(k1, x.rangeUb)
           || I.inf[x][k1] == 0 && !(le(x.rangeLb, k1) && lt(k1, x.rangeUb)))
           && (forall i: Int, j: Int :: 0 <= i < j < x.len ==> lt(x.keys[i], x.keys[j]) @(noinst i) @(noinst j))
        && C == set_of_map(x.keys.map, 0, x.len)
        && (x.next == null && (forall y: Node :: I.out[y] == domZero)
         || x.next != null && (forall k1: K :: I.out[x.next][k1] == I.inf[x][k1])
          && (forall y: Node :: y == null || y != x.next ==> I.out[y] == domZero))))
}


define searchStrInv(x, I, C) {
    // Contents subsetof keyset
    (forall k1: K :: k1 in C ==> I.inf[x][k1] >= 1)
    && (forall k1: K, y: Node :: k1 !in C || I.out[y][k1] == 0)
    // Edgesets are disjoint
    && (forall k1: K, y: Node, z: Node :: y == z
       || I.out[y][k1] == 0 || I.out[z][k1] == 0)
}

// The definition of the implementation-specific node predicate assumed by Iris
define node(x, I, C) {
  hrep(x, I, C) &*& searchStrInv(x, I, C)
}
    
/** {Spec} Implemetation-specific lemmas needed by Iris */

lemma node_sep_star(n: Node, I_n: Interface, I_np: Interface, C: Set<K>, Cp: Set<K>)
  requires node(n, I_n, C) &*& node(n, I_np, Cp)
  ensures false
{
  
}

/** Lemmas needed for proofs below */

lemma keyset_implies_bucket(x: Node, Ix: Interface, k: K, C: Set<K>)
  requires hrep(x, Ix, C) &*& intValid(Ix)
  requires k in KS
  requires Ix.inf[x][k] == 1 && (forall y: Node :: Ix.out[y][k] == 0)
  ensures hrep(x, Ix, C) // &*& unchanged(x)
  ensures x.typ == bucket
{
  if (x.typ == root) {
    var y := x.bkts[hash(x, k)];
    pure assert Ix.out[y][k] == 1;
  }
}

/** Begin programs */

/** inRange */
procedure inRange(x: Node, k: K, ghost Ix: Interface, ghost C: Set<K>)
  returns (res: Bool)
  requires k in KS
  requires node(x, Ix, C)
  ensures node(x, Ix, C) &*& (res ==> Ix.inf[x][k] >= 1)
{
  return x.typ == root || le(x.rangeLb, k) && lt(k, x.rangeUb);
}


/** findNext **/
procedure findNext(x: Node, k: K, ghost Ix: Interface, implicit ghost C: Set<K>)
  returns (n: Node)
  requires k in KS
  requires node(x, Ix, C) &*& intValid(Ix)
  requires Ix.inf[x][k] >= 1
  ensures node(x, Ix, C)
  ensures (n != null && Ix.out[n][k] >= 1
           || n == null && (forall y: Node :: Ix.out[y][k] == 0))
{
  if (x.typ == root) {
    n := x.bkts[hash(x, k)];
  } else {
    pure assert x.typ == bucket;
    if (x.next == null) {
      return null;
    } else {
      return x.next;
    }
  }
  //    return n;
}


/** search */
procedure search(x: Node, k: K, Ix: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool)
  requires k in KS
  requires node(x, Ix, C) &*& intValid(Ix)
  requires Ix.inf[x][k] == 1 && (forall y: Node :: Ix.out[y][k] == 0)
  ensures node(x, Ix, C) &*& intValid(Ix)
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (res == k in C)
{
  keyset_implies_bucket(x, Ix, k, C);
  var idx: Int;
  res, idx := arr_find(x.keys, x.len, k);

  return true, res;
}


/** insert */
procedure insert(x: Node, k: K, Ix: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, implicit ghost C1: Set<K>)
  requires k in KS
  requires node(x, Ix, C) &*& intValid(Ix)
  requires Ix.inf[x][k] == 1 && (forall y: Node :: Ix.out[y][k] == 0)
  ensures node(x, Ix, C1)
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> res == k !in C && C1 == C ++ {k}
  ensures !succ ==> C1 == C
{
  keyset_implies_bucket(x, Ix, k, C);

  if (x.len < x.keys.length - 1) {
  
    ghost var m := x.keys.map;
    var old_len := x.len;
    
    var idx, new_len := arr_insert(x.keys, k, x.len);

    map_insert_content_set(m, x.keys.map, idx, k, x.len, new_len);

    x.len := new_len;

    return true, old_len != new_len;
  } else {
    return false, false;
  }
}


/** delete */
procedure delete(x: Node, k: K, ghost Ix: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, implicit ghost C1: Set<K>)
  requires k in KS
  requires node(x, Ix, C) &*& intValid(Ix)
  requires Ix.inf[x][k] == 1 && (forall y: Node :: Ix.out[y][k] == 0)
  ensures node(x, Ix, C1)
  // decisiveOpSpec(x, C, C1, Ix1, res, k):
  ensures C1 == C -- {k} && (res == k in C)
{
  keyset_implies_bucket(x, Ix, k, C);

  ghost var m := x.keys.map;
  var old_len := x.len;

  var new_len, idx := arr_delete(x.keys, k, x.len);

  map_delete_content_set(m, x.keys.map, x.len, new_len, idx, k);

  x.len := new_len;

  return true, old_len != new_len;
}