
options "-abspreds"
include "ordered_type.spl"
include "flows.spl"

datatype KeyTS = pair(key: Int, ts: K)

datatype DataDom = dd(func: Map<Int, K>);

datatype Message = m(nd: Node, dt: DataDom)


// Definition of a node and good condition:


struct Node {
  var next: Node;
  ghost var intf: Interface;
  ghost var pred: Message;
  ghost var contents: Set<KeyTS>;
}


pure function func_of_cont(s: Set<KeyTS>) returns (m: Map<Int, K>)
  requires forall kt1: KeyTS, kt2: KeyTS :: kt1.key == kt2.key ==> kt1 !in s || kt2 !in s
  ensures forall kt: KeyTS :: kt in s ==> m[kt.key] == kt.ts
  ensures forall k: Int :: (forall t: K :: !(pair(k, t) in s)) ==> m[k] == top

pure function out_of_node(x: Node, y: Node, xn: Node, s: Set<KeyTS>) returns (f: Set<Message>)
{
  (xn != null && xn == y) ? {m(x, dd(func_of_cont(s)))} : {} 
}

define hrepSpatial(x) { acc(x) }

define hrep(q) {
  dom(q.intf) == {q}
  && (forall w: Node :: q.intf.out[w] == out_of_node(q, w, q.next, q.contents))
  && (forall w: Node :: w != q ==> q.intf.ins[w] == {} && w == q ==> q.intf.ins[w] == {q.pred})
  && (forall p: KeyTS :: p in q.contents ==> le(p.ts, q.pred.dt.func[p.key]))
  && (q == r ==> (forall k: Int :: q.pred.dt.func[k] == top))
}
 
define globalInt(r, I) {
  true
  && r in dom(I)
  && (forall x: Node :: x in dom(I) ==> I.ins[x] == {})
  && (forall x: Node :: x !in dom(I) ==> I.out[x] == {})
  && (forall x: Node :: x in dom(I) && x.next != null ==> x.next in dom(I))
}


/* -------------------- Actual list procedures -------------------- */

var t: K;

procedure checkContents(x: Node, k: Int) returns (r: KeyTS)
  requires acc(x)
  ensures acc(x)
  ensures old(x.contents) == x.contents
  ensures old(x.intf) == x.intf
  ensures old(x.next) == x.next
  ensures old(x.pred) == x.pred
  ensures r.key == k 
  ensures lt(bottom,r.ts) ==> r in old(x.contents) && (forall t: K :: pair(k,t) in old(x.contents) ==> le(t,r.ts))
  ensures (r.ts == bottom) ==> (forall t: K :: pair(k, t) !in old(x.contents))
{
  assume false;
}

procedure updateContents(x:Node, k:Int, t:K)
  requires acc(x)
  // requires forall kt1: KeyTS, kt2: KeyTS :: kt1.key == kt2.key ==> kt1 !in x.contents || kt2 !in x.contents
  ensures acc(x)
  ensures old(x.intf) == x.intf
  ensures old(x.pred) == x.pred
  ensures old(x.next) == x.next
  ensures pair(k,t) in x.contents
  // ensures forall kt1: KeyTS, kt2: KeyTS :: kt1.key == kt2.key ==> kt1 !in x.contents || kt2 !in x.contents
  ensures forall kt:KeyTS :: kt.key != k && kt in old(x.contents) ==> kt in x.contents
  ensures forall kt:KeyTS :: kt.key != k && kt in x.contents ==> kt in old(x.contents)    


/*
procedure updateContents(x: Node, k: Int, t: K)
  requires acc(x)
  ensures acc(x)
  ensures pair(k, t) in x.contents && (forall p: KeyTS :: p in old(x.contents) ==> lt(p.ts,t))
  ensures forall kt: KeyTS :: kt.key == k && kt.ts != t ==> kt !in x.contents
  ensures forall kt: KeyTS :: kt in old(x.contents) && kt.key != k ==> kt in x.contents
  ensures forall kt: KeyTS :: kt in x.contents && kt.key != k ==> kt in old(x.contents)  
  ensures old(x.intf) == x.intf
  ensures old(x.pred) == x.pred
  ensures old(x.next) == x.next
  ensures t == old(t)
*/

/*
procedure search(r: Node, X: Set<Node>, k: Int) returns (res: KeyTS)
  requires acc(X)
  requires forall x: Node :: x in X ==> hrep(x)
  requires globalInt(r, intCompSet(X))
  ensures acc(X)
  ensures forall x: Node :: x in X ==> hrep(x)
  ensures globalInt(r, intCompSet(X))
{
  var st := t;
  pure assume forall n: Node, kt: KeyTS :: n in X && kt in n.contents ==> le(kt.ts,st); 

  pure assume forall x: Node ::
    x in X ==> intCompSet(X).ins[x] subsetof x.intf.ins[x];
  pure assume forall x: Node, y: Node ::
    x in X && y in X
    ==> x.intf.out[y] subsetof y.intf.ins[y];


  var c:Node := r;
  res := pair(k, bottom);
  var b:Bool := false; 

  while (c != null && b == false)
    invariant acc(X)
    invariant forall x: Node :: x in X ==> hrep(x)
    invariant globalInt(r, intCompSet(X))
    invariant (c == null || c in X)
    invariant forall n: Node, kt: KeyTS :: n in X && kt in n.contents ==> le(kt.ts,st)
  {
    pure assume forall x: Node ::
      x in X ==> intCompSet(X).ins[x] subsetof x.intf.ins[x];
    pure assume forall x: Node, y: Node ::
      x in X && y in X
      ==> x.intf.out[y] subsetof y.intf.ins[y];

    pure assert c != r ==> c.pred.dt.func[k] == top;
    res := checkContents(c,k);
    
    if (res.ts == bottom) {
      c := c.next;      
    } else {
      pure assert res in c.contents;
      // pure assert le(st, c.pred.dt.func[k]);
      b := true;
    } 
  }

  return res;
}
*/

pure function dummy(I1:Interface, I2:Interface) returns (I:Interface)
  ensures I != intUndef ==> (forall z:Node, m: Message :: m in I.out[z] ==> z !in I.dom && m.nd in I.dom && m in m.nd.intf.out[z])


// /*
procedure upsert(r: Node, X: Set<Node>, k:Int) 
  requires acc(X)
  requires forall e:Node :: e in X ==> hrep(e)
  requires globalInt(r,intCompSet(X))
  ensures acc(X)
  ensures forall f: Node :: f in X ==> hrep(f)
  ensures globalInt(r, intCompSet(X))
{
  pure assume forall x: Node ::
    x in X ==> intCompSet(X).ins[x] subsetof x.intf.ins[x];
  pure assume forall x: Node, y: Node ::
    x in X && y in X
    ==> x.intf.out[y] subsetof y.intf.ins[y];


  var n := r.next;
  pure assume n != null;

  var insr := {z:Node :: r.intf.ins[z]};
  var outr := {z:Node :: r.intf.out[z]};
  var insn := {z:Node :: n.intf.ins[z]};
  var outn := {z:Node :: n.intf.out[z]};

  var Ir: Interface, In:Interface;
  pure assume Ir == r.intf;
  pure assume In == n.intf;
  var Id := intComp(Ir, In);
  pure assume Id != intUndef;      // To be proven

  pure assert "test" forall z:Node, m:Message :: (m in Id.out[z]) ==> (m.nd in Id.dom && m in m.nd.intf.out[z] && z !in Id.dom);
  // pure assume false;

  var v := increment(t);

  pure assume forall p: KeyTS, z: Node :: p in z.contents ==> lt(p.ts,v); //assumption that t represents the time

  updateContents(r, k, v);

  pure assert old(r.intf) == r.intf;
  pure assert old(n.intf) == n.intf;
  //pure assert old(Id.dom) == Id.dom;


  pure assert "test" forall z:Node, m:Message :: (m in Id.out[z]) ==> (m.nd in Id.dom && m in m.nd.intf.out[z] && z !in Id.dom);
  pure assert false;

  n.pred := m(r, dd(func_of_cont(r.contents)));

  var rout := {z:Node :: out_of_node(r, z, r.next, r.contents)};
  var nout := {z:Node :: out_of_node(n, z, n.next, n.contents)};
  var rins := {z:Node :: Id.ins[z] ++ nout[z]};
  var nins := {z:Node :: Id.ins[z] ++ rout[z]};

  var Ir1 := int(rins,rout,{r});
  var In1 := int(nins,nout,{n});
  var Id1 := intComp(Ir1,In1);
  pure assume Id1 != intUndef;    // To be proven

  // pure assert Id1 == intComp(Ir1,In1);

  pure assume forall z:Node :: Id1.ins[z] == Id.ins[z];  // Need to prove

  pure assert forall z:Node, m:Message :: (m in Id.out[z]) ==> (m.nd in Id.dom && m in m.nd.intf.out[z] && z !in Id.dom);
  pure assert n.contents == old(n.contents);
  pure assert forall z:Node, m:Message :: m in Id.out[z] && m.nd == r ==> m in Id1.out[z];
  pure assume false; 

  pure assert Id1.dom == Id.dom;
  pure assert (forall z: Node :: z in Id.dom ==> Id1.ins[z] == Id.ins[z]);
  pure assert (forall z: Node :: z !in Id.dom ==> Id1.out[z] == Id.out[z]);

  pure assert intEq(Id,Id1); // intEq throws an error.
  // pure assume false;

  pure assert dom(Ir1) == {r};

  r.intf := Ir1;
  n.intf := In1;

  pure assert r.intf == Ir1;


  pure assert dom(r.intf) == {r};
  pure assert (forall w: Node :: r.intf.out[w] == out_of_node(r, w, r.next, r.contents));
  pure assert (forall w: Node :: w != r ==> r.intf.ins[w] == {} && w == r ==> r.intf.ins[w] == {r.pred});
  pure assert (forall p: KeyTS :: p in r.contents ==> le(p.ts, r.pred.dt.func[p.key]));
  pure assert (r == r ==> (forall k: Int :: r.pred.dt.func[k] == top));
  pure assert hrep(r);

  pure assert dom(n.intf) == {n};
  pure assert (forall w: Node :: n.intf.out[w] == out_of_node(n, w, n.next, n.contents));
  pure assert (forall w: Node :: w != n ==> n.intf.ins[w] == {} && w == n ==> n.intf.ins[w] == {n.pred});
  pure assert (forall p: KeyTS :: p in n.contents ==> le(p.ts, n.pred.dt.func[p.key]));
  pure assert (n == r ==> (forall k: Int :: n.pred.dt.func[k] == top));
  pure assert hrep(r);

  pure assert globalInt(r,intCompSet(X));  

}
// */