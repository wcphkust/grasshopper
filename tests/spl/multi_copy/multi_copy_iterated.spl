
options "-abspreds"
include "ordered_type.spl"


/* -------------------- Flows library -------------------- */

// Interfaces
datatype Interface =
  int(inf: Map<Node, FlowDom>,
      fm: Map<Node, Map<Node, FlowDom>>,
      dom: Set<Node>)

// Interface contextual extension (allows increasing domain)
pure function intLeq(I1: Interface, I2: Interface) returns (res: Bool)
  ensures forall I1: Interface, I2:Interface, I3: Interface ::
    intLeq(I1, I2) && intLeq(I2, I3) ==> intLeq(I1, I3)
{
  dom(I1) subsetof dom(I2)
    && (forall n:Node :: n in dom(I1) ==> fdEq(I1.inf[n], I2.inf[n]))
    && (forall n:Node :: !(n in dom(I2)) ==> fdEq(I2.inf[n], fdZero()))
    && (forall n:Node, m:Node ::
      !fdEq(I1.inf[n], fdZero()) ==> fdEq(I1.fm[n][m], I2.fm[n][m]))
    && (forall n:Node, m:Node ::
      n in dom(I1) && !(n in dom(I2)) ==> fdEq(I2.fm[n][m], fdZero()))
}

// Composition of intf field of a set of nodes
function intCompSet(X: Set<Node>) returns (I: Interface)
  requires acc(X)
  ensures dom(I) == X

// TODO add statement macros to Grasshopper

// define _assume_flow_eqn_global(X) {
//   // Flow map equation for big region:  // TODO is this actually used anywhere?
//   pure assume forall x: Node, y: Node ::
//     x in X && !(y in X)
//     ==> fdLeq(x.intf.fm[x][y], intCompSet(X).fm[x][y]);
//   // Flow equation approximations for large interface:
//   pure assume forall x: Node ::
//     x in X ==> fdLeq(intCompSet(X).inf[x], x.intf.inf[x]);
//   pure assume forall x: Node, y: Node ::
//     x in X && y in X
//     ==> fdLeq(fdMult(x.intf.inf[x], x.intf.fm[x][y]), y.intf.inf[y]);
// }


/* -------------------- List example specific flows setup -------------------- */

datatype KeyTS = pair(key: Int, ts: K)

datatype Dnode = dn(node: Node, func: Map<Int, K>)

datatype FlowDom = fd(kt: Map<Dnode, Int>);

define fdEq(p1, p2) { p1 == p2 }

pure predicate fdLeq(p1: FlowDom, p2:FlowDom) {
   forall x: Dnode :: p1.kt[x] <= p2.kt[x] 
}

pure function fdPlus(p1: FlowDom, p2:FlowDom) returns (p: FlowDom) {
  fd({x: Dnode :: p1.kt[x] + p2.kt[x]})
}

pure function fdMult(p1: FlowDom, p2:FlowDom) returns (p: FlowDom) {
  fd({x: Dnode :: p1.kt[x]*p2.kt[x]})
}

pure function fdZero() returns (p: FlowDom) {
  fd({x: Dnode :: 0})
}

pure function fdOne() returns (p: FlowDom) {
  fd({x: Dnode :: 1})
}

// Definition of a node and good condition:


struct Node {
  var next: Node;
  ghost var intf: Interface;
  ghost var pred: Dnode;
  ghost var contents: Set<KeyTS>;
}


pure function func_of_cont(s: Set<KeyTS>) returns (m: Map<Int, K>)
ensures forall l: KeyTS :: l in s ==> m[l.key] == l.ts
ensures forall k: Int :: (forall t: K :: !(pair(k, t) in s)) ==> m[k] == top 

pure function fm_of_node(x: Node, y: Node, xn: Node, s: Set<KeyTS>) returns (f: FlowDom)
{
  (xn != null && xn == y) ? fd({a: Dnode :: (a.node == x && a.func == func_of_cont(s)) ? 1 : 0}) : fdZero() 
}

define hrepSpatial(x) { acc(x) }

define hrep(x) {
  dom(x.intf) == Set(x)
  && (forall z: Node :: x.intf.fm[x][z] == fm_of_node(x, z, x.next, x.contents))
  && x.intf.inf[x].kt[x.pred] == 1 && (forall p: KeyTS :: p in x.contents ==> le(p.ts,x.pred.func[p.key]))
  // Example-specific good conditions:
  // Inflow can be zero to cover unlinked nodes before GC de-allocates them
  //&& (x.intf.inf[x] == fd(1) || x.intf.inf[x] == fd(0))
}
 
pure function inflow(x: Node) returns (a: Map<Dnode,Int>)
{
  {d: Dnode :: (d.node == x) ? 1 : 0}
}

define globalInt(r, I) {
  r in dom(I)
  && (forall x: Node :: I.inf[x] == fd(inflow(x)))
  && (forall y: Node ::
    y !in dom(I) ==> fdEq(I.fm[r][y], fdZero()))
  // Data structure is closed (no longer follows from above line)
  && (forall x: Node :: x in dom(I) && x.next != null ==> x.next in dom(I))
}


/* -------------------- Actual list procedures -------------------- */

var t: K;

procedure checkContents(x: Node, k: Int) returns (r: KeyTS)
  requires acc(x)
  ensures acc(x)
  ensures old(x.contents) == x.contents
  ensures old(x.intf) == x.intf
  ensures old(x.next) == x.next
  ensures old(x.pred) == x.pred
  ensures r.key == k 
  ensures lt(bottom,r.ts) ==> r in old(x.contents) && (forall t: K :: pair(k,t) in old(x.contents) ==> le(t,r.ts))
  ensures (r.ts == bottom) ==> (forall t: K :: pair(k, t) !in old(x.contents))
{
  assume false;
}

// /*
procedure updateContents(x: Node, k: Int, t: K)
  requires acc(x)
  ensures acc(x)
  ensures ((pair(k, t) in x.contents && 
                         (forall p: KeyTS :: p in old(x.contents) ==> lt(p.ts,t))))       // Not unique (k,t) pair in the contents.
// */

/*
procedure search(r: Node, X: Set<Node>, k: Int) returns (res: KeyTS)
  requires acc(X)
  requires forall x: Node :: x in X ==> hrep(x)
  requires globalInt(r, intCompSet(X))
  ensures acc(X)
  ensures forall x: Node :: x in X ==> hrep(x)
  ensures globalInt(r, intCompSet(X))
{

  pure assume forall x: Node ::
    x in X ==> fdLeq(intCompSet(X).inf[x], x.intf.inf[x]);
  pure assume forall x: Node, y: Node ::
    x in X && y in X
    ==> fdLeq(fdMult(x.intf.inf[x], x.intf.fm[x][y]), y.intf.inf[y]);

  var c:Node := r;
  res := pair(k, bottom);
  var b:Bool := false; 

  while (c != null && b == false)
    invariant acc(X)
    invariant forall x: Node :: x in X ==> hrep(x)
    invariant globalInt(r, intCompSet(X))
    invariant (c == null || c in X)
  {

    pure assume forall x: Node ::
      x in X ==> fdLeq(intCompSet(X).inf[x], x.intf.inf[x]);
    pure assume forall x: Node, y: Node ::
      x in X && y in X
      ==> fdLeq(fdMult(x.intf.inf[x], x.intf.fm[x][y]), y.intf.inf[y]);

    //pure assert c !in X ==> fdEq(intCompSet(X).fm[r][c], fdZero());

    pure assert hrep(c);                                     //    Both this 
    pure assert globalInt(r, intCompSet(X));                 //    assertions violated.

    res := checkContents(c,k);
    //pure assume intCompSet(X) == old(intCompSet(X));

    //pure assert false;
    
    if (res.ts == bottom) {
      c := c.next;      
    } else {
      pure assert x.intf.inf
      b := true;
    } 
  }

  return res;
}
*/

// /*
procedure upsert(r: Node, X: Set<Node>, k:Int) 
  requires acc(X)
  requires forall x:Node :: x in X ==> hrep(x)
  requires globalInt(r,intCompSet(X))
  ensures acc(X)
  ensures forall x: Node :: x in X ==> hrep(x)
  ensures globalInt(r, intCompSet(X))
{
  pure assume forall x: Node ::
    x in X ==> fdLeq(intCompSet(X).inf[x], x.intf.inf[x]);
  pure assume forall x: Node, y: Node ::
    x in X && y in X
    ==> fdLeq(fdMult(x.intf.inf[x], x.intf.fm[x][y]), y.intf.inf[y]);

  // pure assert globalInt(r, intCompSet(X));
  t := increment(t);
  
  pure assume forall p: KeyTS :: p in r.contents ==> le(p.key,t);

  updateContents(r, k, t);

  // pure assert globalInt(r,intCompSet(X));
  

}
// */

