options "-symbexec"

procedure foo(a: Int) returns (b: Int)
  requires a == 2
  ensures b == 4

procedure pure_call(c: Int, d:Int)
  requires c == 2 && d == c
  ensures c == 4
{
  c := foo(c);
}

procedure pure_call2(c: Int, d:Int)
  requires c == 2 && d == c
  ensures c == 2 && d == 4
{
  d := foo(c);
}

procedure foo3(a: Int) returns (b: Int)
  requires a == 2
  ensures b == 4 && a == 3

procedure pure_call3(c: Int, d:Int)
  requires c == 2 && d == c
  ensures false
{
  d := foo3(c);
}

procedure foo4(x: Int) returns (y: Int)
  requires x == 3
  ensures y == x + 1

procedure pure_call4(x: Int, y: Int)
  requires x == 3 && x == y + 1
  ensures true
{
  x := foo4(x);
  assert x == y + 2;
}


struct Node {
  var next: Node;
  var data: Int;
}

procedure clear(x: Node)
  requires acc(x)
  ensures x.next |-> null

procedure fun_call(y: Node, z: Node)
  requires z.next |-> z &*& y == z
  ensures z.next |-> null &*& y == z
{
  clear(y);
}

procedure bar(x: Node, y: Node)
  requires x.next == y.next &*& y.next == null &*& acc(x) &*& acc(y)
  ensures x.next |-> x &*& y.next |-> y

procedure fun_call2(u: Node, v: Node)
  requires u.next |-> null &*& v.next |-> null
  ensures u.next |-> u &*& v.next |-> v
{
  bar(u, v);
}

procedure bar3(x: Node, y: Node)
  requires x.next == y.next &*& acc(x) &*& acc(y)
  ensures x.next |-> x &*& y.next |-> y

procedure fun_call3(u: Node, v: Node)
  requires u.next |-> null &*& v.next |-> null
  ensures u.next |-> u &*& v.next |-> v
{
  bar3(u, v);
}

procedure bar4(x: Node, y: Node)
  requires acc(x) &*& acc(y)
  ensures x.next |-> x &*& y.next |-> y

procedure fun_call4(u: Node, v: Node)
  requires u.next |-> v &*& v.next |-> null
  ensures u.next |-> u &*& v.next |-> v
{
  bar4(u, u.next);
}

procedure bar5(x: Node, z: Node) returns (y: Node)
  requires x.next |-> x &*& x == z
  ensures y.next |-> y &*& y == z

procedure fun_call5(u: Node, v: Node)
  requires u.next |-> u &*& u == v &*& v == null
  ensures acc(u) &*& u == v &*& v == null
{
  u := bar5(u, v);
}

predicate poo(x: Node)

procedure bar6(x: Node, y: Node, z: Node)
  requires (acc(x) && acc(y)) &*& poo(z) &*& x.data < 3
  ensures acc(x) &*& poo(z)

procedure fun_call6(u: Node, v: Node, w: Node, i: Int)
  requires poo(w) &*& (acc(v) && acc(u)) &*& i == u.data &*& i < 2
  ensures poo(w) &*& acc(u)
{
  bar6(u, v, w);
}

procedure bar7(x: Node, y: Node, z: Node)
  requires (acc(x) && acc(y) &*& poo(z)) &*& x.data == y.data &*& x.data < 3
  ensures acc(x) &*& poo(z)

procedure fun_call7(u: Node, v: Node, w: Node, i: Int, j: Int)
  requires (poo(w) &*& acc(v) && acc(u)) &*& i == u.data &*& i == v.data &*& i < 2
  ensures poo(w) &*& acc(u)
{
  bar7(u, v, w);
}


procedure bar8(x: Node) returns (y: Node)
  requires acc(x)
  ensures acc(y)

procedure boo8(x: Node, y: Node, z: Node)
  requires acc(x) &*& acc(y) &*& y == z
  ensures acc(y) &*& acc(z)
{
  y := bar8(x);
}

procedure bar9(x: Node) returns (y: Node)
  requires acc(x)
  ensures acc(x) &*& acc(y)

procedure boo9(x: Node, y: Node, z: Node)
  requires acc(x) &*& acc(y) &*& x == z
  ensures acc(z) &*& acc(x) &*& acc(y)
{
  x := bar9(x);
}

procedure bar10(x: Node) returns (y: Node, z: Node)
  requires acc(x)
  ensures acc(y) &*& acc(z)

procedure boo10(x: Node, y: Node, z: Node)
  requires acc(x)
  ensures acc(x) &*& acc(y)
{
  x, y := bar10(x);
}

procedure bar11(x: Node) returns (y: Node)
  requires acc(x)
  ensures acc(y)

procedure boo11(x: Node, y: Node)
  requires acc(x)
  ensures acc(x)
{
  while (true)
    invariant acc(x)
  {
    x := bar11(x);
  }
}

struct Rec {
  var a: Int;
  var b: Int;
  var c: Int;
}

procedure bar12(x: Rec)
  requires acc(x)
  ensures acc(x) &*& old(x.a) <= x.a &*& old(x.b) <= x.b

procedure boo12(y: Rec)
  requires acc(y) &*& y.b == 3
  ensures acc(y) &*& 2 < y.b
{
  bar12(y);
}

lemma lemma_1(x: Node, y: Node)
  requires x.next |-> x &*& acc(y)
  ensures poo(x) &*& acc(y)

/* TODO
procedure test_conj1(x: Node, y: Node, z: Node)
  requires (y.next |-> y &*& acc(x)) && (acc(z) &*& acc(y))
  ensures (poo(y) &*& acc(x)) && (acc(z) &*& acc(y))
{
  lemma_1(y, x);
}

procedure test_conj2(x: Node, y: Node, z: Node)
  requires (y.next |-> y &*& acc(x)) && (acc(z) &*& acc(y))
  ensures (acc(x) &*& poo(y)) && (acc(z) &*& acc(y))
{
  lemma_1(y, x);
}
*/
