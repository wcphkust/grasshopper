/* -- Lemma library for flows. Independent of Flow domain. -- */


// Acyclic graphs, so single inflow and interface composition is a function

datatype Interface =
  int(inf: Map<Node, FlowDom>,
      na: NodeDom,
      fm: Map<Node, Map<Node, FlowDom>>,
      FP: Set<Node>)
  | intUndef; // For when compositions don't exist

pure function newInt(m: Node) returns (Im: Interface)
{
  int({ n: Node :: domZero() },
      ndBot(),
      { n: Node :: { n1: Node :: domZero() } },
      {m})
}

pure function intComp(I1: Interface, I2: Interface) returns (I: Interface)
  ensures I != intUndef ==> I.FP == I1.FP ++ I2.FP
  ensures forall n: Node :: I == intUndef || n !in I1.FP || n !in I2.FP
  ensures I != intUndef ==> I.na == ndJoin(I1.na, I2.na)

// Encoding of well defined interfaces
pure predicate intValid(I: Interface)

define domEq(p1, p2) {
  p1 == p2
}

// Contextually equivalent interfaces (node labels can be different)
pure predicate intEq(I1: Interface, I2: Interface) {
  I1.FP == I2.FP
  && (forall x: Node :: domEq(I1.inf[x], I2.inf[x])
     @(matching x yields I1.inf[x]) @(matching x yields I2.inf[x]))
  && (forall x: Node, y: Node :: x in I1.FP && y !in I1.FP ==>
     domEq(domMult(I1.inf[x], I1.fm[x][y]), domMult(I2.inf[x], I2.fm[x][y]))
     @(matching I2.fm[x][y] yields known(domMult(I1.inf[x], I1.fm[x][y])))
     @(matching I2.fm[x][y] yields known(domMult(I2.inf[x], I2.fm[x][y]))))
}


// Associativity, commutativity, cancellativity of intComp
axiom forall I1: Interface, I2: Interface, I3: Interface ::
  intComp(I1, intComp(I2, I3)) == intComp(intComp(I1, I2), I3);
axiom forall I1: Interface, I2: Interface ::
  intComp(I1, I2) == intComp(I2, I1) @(matching intComp(I1, I2) yields intComp(I2, I1));
//axiom forall I1: Interface, I2: Interface, I3: Interface :: bad bad bad - adding this is unsound
  //intComp(I1, I2) == intComp(I1, I3) ==> I2 == I3

// Composition of undef with anything is undef
axiom forall I1: Interface, I2: Interface ::
  intComp(I1, I2) != intUndef ==> (I1 != intUndef && I2 != intUndef);

// Valid interfaces are not undefined
axiom forall I: Interface :: intValid(I) ==> I != intUndef;

axiom forall I1: Interface, I2: Interface ::
  intValid(I1) && intValid(I2) && intComp(I1, I2) != intUndef ==> intValid(intComp(I1, I2));

axiom forall I1: Interface, I2: Interface ::
  (! intValid(I1) || ! intValid(I2)) ==> intComp(I1, I2) == intUndef;

// Sufficient condition for intComp(I, Ix, Iy), when no edge from y to x
lemma lemma_int_comp_fold(x: Node, Ix: Interface, y: Node, Iy: Interface)
  returns (I: Interface)
  requires intValid(Ix) == true && intValid(Iy) == true
  requires Ix.FP == {x} && Iy.FP == {y} && x != y
  requires domLeq(domMult(Ix.inf[x], Ix.fm[x][y]), Iy.inf[y]) == true
  requires Iy.fm[y][x] == domZero
  ensures intComp(Ix, Iy) == I && intValid(I) == true && I.FP == {x, y}

// Computes Ix + Iy + Iz when {x, y, z} is a topological ordering
lemma lemma_int_comp_fold_3(x: Node, Ix: Interface, y: Node, Iy: Interface, z: Node, Iz: Interface)
  returns (I: Interface)
  requires intValid(Ix) == true && intValid(Iy) == true && intValid(Iz) == true
  requires Ix.FP == {x} && Iy.FP == {y} && Iz.FP == {z} && x != y && x != z && z != y
  requires domEq(Iy.fm[y][x], domZero())
  requires domEq(Iz.fm[z][x], domZero()) && domEq(Iz.fm[z][y], domZero())
  requires domLeq(domMult(Ix.inf[x], Ix.fm[x][y]), Iy.inf[y]) == true
  requires domLeq(domPlus(domMult(Ix.inf[x], Ix.fm[x][z]), domMult(Iy.inf[y], Iy.fm[y][z])),
    Iz.inf[z]) == true
  ensures intComp(Ix, intComp(Iy, Iz)) == I && intValid(I) == true && I.FP == {x, y, z}

lemma lemma_int_comp_unfold(x: Node, Ix: Interface, y: Node, Iy: Interface, I: Interface)
  requires Ix != intUndef && Iy != intUndef && I != intUndef
  requires intComp(Ix, Iy) == I && x != y && Iy.fm[y][x] == domZero && Ix.FP == {x} && Iy.FP == {y}
  ensures I.FP == {x, y}
  && domEq(Ix.inf[x], I.inf[x])
  && domEq(Iy.inf[y], domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])))
  && (forall n1: Node :: n1 !in I.FP ==>
           (domEq(I.fm[x][n1],
                    domPlus(Ix.fm[x][n1], domMult(Ix.fm[x][y], Iy.fm[y][n1])))))
  && (forall n1: Node :: n1 !in I.FP ==> (domEq(I.fm[y][n1], Iy.fm[y][n1])))

lemma lemma_int_comp_unfold_3(x: Node, Ix: Interface, y: Node, Iy: Interface,
                              z: Node, Iz: Interface, I: Interface)
  requires intValid(I) == true && intComp(Ix, intComp(Iy, Iz)) == I
  requires Ix.FP == {x} && Iy.FP == {y} && Iz.FP == {z} && x != y && x != z && z != y
  requires domEq(Iy.fm[y][x], domZero())
  requires domEq(Iz.fm[z][x], domZero()) && domEq(Iz.fm[z][y], domZero())
  ensures domLeq(domMult(Ix.inf[x], Ix.fm[x][y]), Iy.inf[y]) == true
  ensures domLeq(domPlus(domMult(Ix.inf[x], Ix.fm[x][z]), domMult(Iy.inf[y], Iy.fm[y][z])),
    Iz.inf[z]) == true
  ensures domEq(Ix.inf[x], I.inf[x])
  ensures domEq(Iy.inf[y], domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])))
  ensures domEq(Iz.inf[z],
    domPlus(I.inf[z], domPlus(domMult(Ix.inf[x], Ix.fm[x][z]), domMult(Iy.inf[y], Iy.fm[y][z]))))
  ensures forall n: Node :: domEq(I.fm[z][n], Iz.fm[z][n])
  ensures forall n: Node :: domEq(I.fm[y][n], domPlus(Iy.fm[y][n], domMult(Iy.fm[y][z], Iz.fm[z][n])))
  ensures forall n: Node ::
    domEq(I.fm[x][n], domPlus(Ix.fm[x][n],
    domPlus (domMult(Ix.fm[x][z], Iz.fm[z][n]), domMult(Ix.fm[x][y], I.fm[y][n]))))
  
lemma lemma_int_valid_unfold(x: Node, I: Interface)
  requires intValid(I) == true && I.FP == {x}
  ensures forall n: Node :: n !in I.FP ==> domEq(I.inf[n], domZero())
  ensures forall n: Node, n1: Node :: n !in I.FP ==> domEq(I.fm[n][n1], domZero())
  //ensures forall n: Node :: n !in I.FP || n !in I.FPo
  ensures forall n: Node :: domLeq(domZero(), I.inf[n])
  ensures forall n: Node, n1: Node :: domLeq(domZero(), I.fm[n][n1])
  ensures nu(x, I)

lemma lemma_int_valid_unfold_I(I: Interface)
  requires intValid(I) == true
  ensures forall n: Node :: n !in I.FP ==> domEq(I.inf[n], domZero())
  ensures forall n: Node, n1: Node :: n !in I.FP ==> domEq(I.fm[n][n1], domZero())
  ensures forall n: Node, n1: Node :: n1 in I.FP ==> domEq(I.fm[n][n1], domZero())
  ensures forall n: Node :: domLeq(domZero(), I.inf[n])
  ensures forall n: Node, n1: Node :: domLeq(domZero(), I.fm[n][n1])

lemma lemma_int_valid_fold(x: Node, I: Interface)
  requires I != intUndef
  requires forall n: Node :: n !in I.FP ==> domEq(I.inf[n], domZero())
  requires forall n: Node, n1: Node :: n !in I.FP ==> domEq(I.fm[n][n1], domZero())
  requires forall n: Node, n1: Node :: n1 in I.FP ==> domEq(I.fm[n][n1], domZero())
  requires forall n: Node :: domLeq(domZero(), I.inf[n])
  requires forall n: Node, n1: Node :: domLeq(domZero(), I.fm[n][n1])
  requires nu(x, I) && I.FP == {x}
  ensures intValid(I) == true


procedure copy_interface(I: Interface, a: NodeDom)
  returns (I1: Interface)
  ensures I1 == int(I.inf, a, I.fm, I.FP)
{
  I1 := int(I.inf, a, I.fm, I.FP);
}

lemma lemma_acyclic_2(x: Node, Ix: Interface, y: Node, Iy: Interface)
  requires intValid(intComp(Ix, Iy)) == true
  requires !domEq(domMult(Ix.inf[x], Ix.fm[x][y]), domZero())
  ensures domEq(Iy.fm[y][x], domZero())

lemma lemma_proj(x: Node, Ix: Interface, Iy: Interface, I: Interface)
  requires I == intComp(Ix, Iy) && intValid(I) && x in Ix.FP
  ensures domLeq(I.inf[x], Ix.inf[x]) == true

lemma lemma_step(I1: Interface, I2: Interface, I: Interface, x: Node, y: Node)
  requires intComp(I1, I2) == I && x in I1.FP
  requires !domLeq(I1.fm[x][y], domZero) && domEq(I.fm[x][y], domZero)
  ensures y in I2.FP && domLeq(domMult(I1.inf[x], I1.fm[x][y]), I2.inf[y]) == true

