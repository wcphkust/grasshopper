/** B+ tree implementation of the link template for linearizable dictionaries. */

options "-abspreds -simplearrays -propreads"
  // TODO: -symbexec: function definitions with field reads: add equalities to VC!!

include "flows.spl"
include "array_util.spl"


/** Flow and node domain definitions */

datatype FlowDom = fd(ks: Map<K, Int>, ir: Map<K, Int>)

/*
pure predicate domEq(p1: FlowDom, p2: FlowDom) {
  p1.ks == p2.ks && p1.ir == p2.ir
  //  (forall k: K :: p1.ks[k] == p2.ks[k]
  //   @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
  //    && (forall k: K :: p1.ir[k] == p2.ir[k]
  //     @(matching p1.ir[k] yields p2.ir[k]) @(matching p2.ir[k] yields p1.ir[k]))

}
 */

pure predicate domLeq(p1: FlowDom, p2: FlowDom) {
  (forall k: K :: p1.ks[k] <= p2.ks[k]
    @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
    && (forall k: K :: p1.ir[k] <= p2.ir[k]
    @(matching p1.ir[k] yields p2.ir[k]) @(matching p2.ir[k] yields p1.ir[k]))
}

pure function domPlus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
{
  fd({k: K :: p1.ks[k] + p2.ks[k]}, {k: K :: p1.ir[k] + p2.ir[k]})
}

pure function domMult(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
{
  fd({k: K :: p1.ks[k] * p2.ks[k]}, {k: K :: p1.ir[k] * p2.ir[k]})
}

pure function domZero() returns(p: FlowDom)
{
  fd({k: K :: 0}, {k: K :: 0})
}


datatype InrFn = inrfnC(inrfn: Map<Node, Set<K>>, inrdom: Set<Node>) | inrfnUndef;
  
datatype NodeDom = nd(contents: Set<K>, inr: InrFn, outs: Set<K>);

pure predicate ndLeq(a1: NodeDom, a2: NodeDom) {
  (forall k: K :: k in a1.contents ==> k in a2.contents)
  && (a2.inr == inrfnUndef || a1.inr != inrfnUndef && a2.inr != inrfnUndef
     && (forall x: Node :: x in a1.inr.inrdom ==> x in a2.inr.inrdom && a1.inr.inrfn[x] == a2.inr.inrfn[x]))
  && (forall k: K :: k in a1.outs ==> k in a2.outs)  // TODO a2.contents should be a2.outs
}

//pure function ndJoinWitness(a1: NodeDom, a2: NodeDom) returns (n: Node)

pure function ndJoin(a1: NodeDom, a2: NodeDom) returns (a: NodeDom)
  ensures a.contents == a1.contents ++ a2.contents
  ensures a.outs == a1.outs ++ a2.outs
  // Encoding Disjoint(a1.inr.inrdom, a2.inr.inrdom):
  //  ensures (ndJoinWitness(a1, a2) in a1.inr.inrdom && ndJoinWitness(a1, a2) in a1.inr.inrdom)
  //    || a.inr == inrfnC({n: Node :: n in a1.inr.inrdom ? a1.inr.inrfn[n] : a2.inr.inrfn[n]},
  //                      a1.inr.inrdom ++ a1.inr.inrdom)
  //  ensures a.inr == inrfnUndef || (forall n: Node :: n !in a1.inr.inrdom || n !in a2.inr.inrdom)
/*{
  (exists n: Node :: n in a1.inr.inrdom && n in a2.inr.inrdom) ?
    nd(a1.contents ++ a2.contents, inrfnUndef, a1.outs ++ a2.outs)
    : nd(a1.contents ++ a2.contents,
         inrfnC({n: Node :: n in a1.inr.inrdom ? a1.inr.inrfn[n] : a2.inr.inrfn[n]},
           a1.inr.inrdom ++ a1.inr.inrdom),
         a1.outs ++ a2.outs)
}*/

pure function ndBot() returns (a: NodeDom)
{
  nd({}, inrfnC({n: Node :: {}}, {}), {})
}


/** Definition of a node */

struct Node {
  var len: Int;
  var keys: Array<K>;
  var ptrs: Array<Node>;
  var next: Node;
  ghost var rangeLb: K;
  ghost var rangeUb: K;
}

define unchanged(x) {
  x.len == old(x.len) && x.next == old(x.next)
    && x.rangeLb == old(x.rangeLb) && x.rangeUb == old(x.rangeUb)
    && x.keys == old(x.keys) && x.ptrs == old(x.ptrs)
    && x.keys.length == old(x.keys.length) && x.keys.map == old(x.keys.map)
    && x.ptrs.length == old(x.ptrs.length) && x.ptrs.map == old(x.ptrs.map)
}


/** Definition of heap representation, hrep */

var B: Int
axiom B > 1

define hrepSpatial(x) {
  acc(x) &*& acc(x.keys) &*& acc(x.ptrs) &*& x.keys.length == 2*B &*& x.ptrs.length == 2*B
}


function fm_child(x: Node, xnext: Node, xkeys: Map<Int, K>, xlen: Int, i: Int) returns (f: FlowDom)
{
  fd({ k : K ::
      i < xlen ?
        ((i == 0 || le(xkeys[i-1], k)) && lt(k, xkeys[i]) ? 1 : 0)
        : (i == xlen && xnext == null ?
            ((i == 0 || le(xkeys[i-1], k)) ? 1 : 0)
            : (i == xlen && xnext != null ?
                ((i == 0 || le(xkeys[i-1], k)) && lt(k, xkeys[i]) ? 1 : 0)
                : 0)) },
      { k : K :: 0 } )
}

function fm_next(x: Node, xnext: Node, xkeys: Map<Int, K>, xlen: Int)
  returns (f: FlowDom)
{
  fd({ k: K :: xnext != null && le(xkeys[xlen], k) ? 1 : 0 },
     { k: K :: xnext != null && le(xkeys[xlen], k) ? 1 : 0 })
}


function fm_ind(x: Node, xnext: Node, xkeys: Map<Int, K>, xptrs: Map<Int, Node>,
    xlen: Int, i: Int)
  returns (f: Map<Node, Map<Node, FlowDom>>)
{
  { n: Node :: { n1: Node ::
    n != x ? domZero()
    : (i < 0 ? (n1 == xnext ? fm_next(x, xnext, xkeys, xlen) : domZero())
       : (i <= xlen && xptrs[0] != null && {n1} == {xptrs[i]} ? fm_child(x, xnext, xkeys, xlen, i)
          : fm_ind(x, xnext, xkeys, xptrs, xlen, i - 1)[n][n1]))
   }
  }
}

function FPo_ind(x: Node, xnext: Node, xptrs: Map<Int, Node>, xlen: Int, i: Int)
  returns (X: Set<Node>)
{
  i < 0 ? (xnext != null ? {xnext} : {})
    : (i <= xlen && xptrs[0] != null ? {xptrs[i]} ++ FPo_ind(x, xnext, xptrs, xlen, i - 1)
       : FPo_ind(x, xnext, xptrs, xlen, i - 1))
}

function inflow(x: Node, xrangeLb: K, xrangeUb: K) returns (i: Map<Node, FlowDom>)
{
  { n: Node :: n != x ? domZero()
      : fd({k: K :: le(xrangeLb, k) && lt(k, xrangeUb) ? 1 : 0},
           {k: K :: le(xrangeLb, k) && lt(k, top) ? 1 : 0}) }
}

pure function outset(x: Node, xnext: Node, xkeys: Map<Int, K>, xptrs: Map<Int, Node>,
                     xlen: Int, i: Int)
  returns (O: Set<K>)
{
  xptrs[0] == null ? { k: K :: xnext != null && le(xkeys[xlen], k) }
  : (i < 0 ? { k: K :: xnext != null && le(xkeys[xlen], k) }
     : (i <= xlen ?
         { k: K :: (i < xlen && (i == 0 || le(xkeys[i-1], k)) && lt(k, xkeys[i]))
                  || (i == xlen && xnext == null && (i == 0 || le(xkeys[i-1], k)))
                  || (i == xlen && xnext != null && (i == 0 || le(xkeys[i-1], k)) && lt(k, xkeys[i])) }
         ++ outset(x, xnext, xkeys, xptrs, xlen, i - 1)
       : outset(x, xnext, xkeys, xptrs, xlen, i - 1)))
}

function nodeabs(x: Node, xnext: Node, xkeys: Map<Int, K>, xptrs: Map<Int, Node>, xlen: Int,
                 inff: Map<Node, FlowDom>, C: Set<K>, i: Int)
  returns (a: NodeDom)
{
  nd(C,
     inrfnC({n: Node :: n != x ? {} : {k: K :: inff[x].ks[k] >= 1 || inff[x].ir[k] >= 1}}, {x}),
     outset(x, xnext, xkeys, xptrs, xlen, i))
}

function int_ind(x: Node, xnext: Node, xkeys: Map<Int, K>, xptrs: Map<Int, Node>, xlen: Int,
                 xrangeLb: K, xrangeUb: K, i: Int)
  returns (I: Interface)
{
  int(inflow(x, xrangeLb, xrangeUb),
      nodeabs(x, xnext, xkeys, xptrs, xlen, inflow(x, xrangeLb, xrangeUb), {}, i),
      fm_ind(x, xnext, xkeys, xptrs, xlen, i),
      {x}, FPo_ind(x, xnext, xptrs, xlen, i))
}

define heapGood(x, xnext, xkeys, xptrs, xlen, xrangeLb, xrangeUb) {
  xnext != x && 0 <= xlen && xlen < 2*B && (xnext == null ==> xrangeUb == top)
    // Keys are sorted
    && (forall i: Int, j: Int :: 0 <= i < j <= xlen ==> lt(xkeys[i], xkeys[j]))
    // Keys are in the range
    && (forall i: Int :: 0 <= i && (xnext == null && i < xlen || xnext != null && i <= xlen)
        ==> le(xrangeLb, xkeys[i]) && lt(xkeys[i], xrangeUb))
    // All outgoing pointers are distinct
    && (forall i: Int :: xptrs[0] != null && 0 <= i <= xlen
         ==> x != xptrs[i])
    && (forall i: Int :: xptrs[0] != null && 0 <= i <= xlen
         ==> xptrs[i] != xnext)
    && (forall i: Int, j: Int :: xptrs[0] != null && 0 <= i < j <= xlen
         ==> xptrs[i] != xptrs[j])
    // Internal nodes don't point to null
    && (forall i: Int :: xptrs[0] != null && 0 <= i <= xlen ==> xptrs[i] != null)
}

define hrep(x, I) {
  hrepSpatial(x) &*& heapGood(x, x.next, x.keys.map, x.ptrs.map, x.len, x.rangeLb, x.rangeUb)
    &*& (x.ptrs[0] != null  // Internal
        && I == int_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, x.rangeLb, x.rangeUb, x.len)
     || x.ptrs[0] == null  // Leaf
        && I.FP == {x}
        && I.inf == inflow(x, x.rangeLb, x.rangeUb)
        && I.na == nodeabs(x, x.next, x.keys.map, x.ptrs.map, x.len,
                          inflow(x, x.rangeLb, x.rangeUb),
                          set_of_map(x.keys.map, 0, x.len), x.len)
        && (x.next == null && I.FPo == {}
          || x.next != null && I.FPo == {x.next}
          && (forall k: K :: le(x.keys[x.len], k) ==> I.fm[x][x.next].ks[k] == 1)
          && (forall k: K :: lt(k, x.keys[x.len]) ==> I.fm[x][x.next].ks[k] == 0
          @(matching x.next yields I.fm[x][x.next].ks[k]))))
}

    
lemma lemma_fm(x: Node, Ix: Interface, i: Int, j: Int)
  requires hrep(x, Ix) &*& x.ptrs[0] != null
  ensures hrepSpatial(x) &*& unchanged(x)
  ensures forall k: K :: x.next != null && le(x.keys[x.len], k)
    ==> fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j)[x][x.next].ks[k] >= 1
    @(matching fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j)[x][x.next].ks[k]
    yields fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j-1)[x][x.next].ks[k])

  ensures forall k: K :: i <= j && 0 <= i < x.len && (i == 0 || le(x.keys[i-1], k)) && lt(k, x.keys[i])
    ==> fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j)[x][x.ptrs[i]].ks[k] >= 1
    @(matching fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j)[x][x.ptrs[i]].ks[k]
    yields fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j-1)[x][x.ptrs[i]].ks[k])

  ensures forall k: K :: i <= j && i == x.len && x.next == null && (i == 0 || le(x.keys[i-1], k))
    ==> fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j)[x][x.ptrs[i]].ks[k] >= 1

  ensures forall k: K :: i <= j && i == x.len && x.next != null && (i == 0 || le(x.keys[i-1], k)) && lt(k, x.keys[i])
    ==> fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, j)[x][x.ptrs[i]].ks[k] >= 1
{
  if (j >= 0) {
    lemma_fm(x, Ix, i, j - 1);
  }
}


// The good condition
define nu(x, I) {
    // Contents subsetof keyset
    (forall k: K :: k in I.na.contents ==> I.inf[x].ks[k] >= 1)
    && (forall k: K, y: Node :: k !in I.na.contents || I.fm[x][y].ks[k] == 0)
    // Edgesets are disjoint
    && (forall k: K, y: Node, z: Node :: y == z
       || I.fm[x][y].ks[k] == 0 || I.fm[x][z].ks[k] == 0)
    // Inreach keyset subsetof inset
    && (forall k: K :: I.inf[x].ir[k] >= 1 && k !in I.na.outs
       ==> I.inf[x].ks[k] >= 1)
    // If k ∈ inreach \ inset, then inreach edgeset is same as normal edgeset (for step)
    && (forall k: K, y: Node :: I.inf[x].ir[k] >= 1 && I.inf[x].ks[k] <= 0
       && I.fm[x][y].ks[k] >= 1 ==> I.fm[x][y].ir[k] >= 1)
    // The node label stores the actual inreach
    && I.na.inr.inrdom == {x}
    && (forall k: K :: (k in I.na.inr.inrfn[x]) == (I.inf[x].ks[k] >= 1 || I.inf[x].ir[k] >= 1))
}


lemma lemma_int_ind_is_valid(x: Node, xnext: Node, xkeys: Map<Int, K>, xptrs: Map<Int, Node>,
  xlen: Int, xrangeLb: K, xrangeUb: K, i: Int)
  returns (I: Interface)
  requires xptrs[0] != null // Only for internal nodes
  requires heapGood(x, xnext, xkeys, xptrs, xlen, xrangeLb, xrangeUb)
  
  ensures I == int_ind(x, xnext, xkeys, xptrs, xlen, xrangeLb, xrangeUb, i)
  ensures intValid(I) == true

  ensures x !in I.FPo
  // To prove edgesets are disjoint, and other nu properties
  ensures forall y: Node, k: K :: I.fm[x][y].ks[k] != 0 ==>
    (xptrs[0] != null && i >= xlen)
    || (xptrs[0] != null && 0 <= i < xlen && lt(k, xkeys[i]))
    || (xnext != null && le(xkeys[xlen], k))
{
  I := int_ind(x, xnext, xkeys, xptrs, xlen, xrangeLb, xrangeUb, i);
  if (i >= 0) {
    var I1 := lemma_int_ind_is_valid(x, xnext, xkeys, xptrs, xlen, xrangeLb, xrangeUb, i - 1);
    lemma_int_valid_unfold(x, I1);
    pure assert (forall k: K, y: Node :: y != xptrs[i] ==> I.fm[x][y].ir[k] == I1.fm[x][y].ir[k]
        @(matching I.fm[x][y].ir[k] yields I1.fm[x][y].ir[k]))
      && (forall k: K, y: Node :: y != xptrs[i] ==> I.fm[x][y].ks[k] == I1.fm[x][y].ks[k]
        @(matching I.fm[x][y].ks[k] yields I1.fm[x][y].ks[k]))
      && (forall k: K ::  I.inf[x].ir[k] == I1.inf[x].ir[k]
        @(matching I.inf[x].ir[k] yields I1.inf[x].ir[k]))
      && (forall k: K ::  I.inf[x].ks[k] == I1.inf[x].ks[k]
        @(matching I.inf[x].ks[k] yields I1.inf[x].ks[k]));

    lemma_int_valid_fold(x, I);
  } else {
    pure assert (forall n: Node, n1: Node :: n1 !in I.FPo ==> domEq(I.fm[n][n1], domZero()));

    lemma_int_valid_fold(x, I);
  }
}

lemma lemma_cont_props(x: Node, xnext: Node, xkeys: Map<Int, K>, xlen: Int, xrangeLb: K, xrangeUb: K, i: Int)
  requires 0 <= i <= xlen
  requires forall j: Int, k: Int :: i <= j < k <= xlen ==> lt(xkeys[j], xkeys[k])
  requires forall j: Int :: i <= j && (xnext == null && j < xlen || xnext != null && j <= xlen) 
        ==> le(xrangeLb, xkeys[j]) && lt(xkeys[j], xrangeUb)
  ensures (forall k in set_of_map(xkeys, i, xlen) :: le(xkeys[i], k))
  ensures (forall k in set_of_map(xkeys, i, xlen) :: lt(k, xkeys[xlen]))
  ensures (forall k in set_of_map(xkeys, i, xlen) :: le(xrangeLb, k) && lt(k, xrangeUb))
{
  if (i < xlen) {
    lemma_cont_props(x, xnext, xkeys, xlen, xrangeLb, xrangeUb, i + 1);
  }
}  

lemma compute_int(x: Node) returns (I: Interface)
  requires hrepSpatial(x)
  requires heapGood(x, x.next, x.keys.map, x.ptrs.map, x.len, x.rangeLb, x.rangeUb)
  ensures hrep(x, I) &*& unchanged(x)
  ensures intValid(I) == true
{
  if (x.ptrs[0] == null) { // Leaf
    lemma_cont_props(x, x.next, x.keys.map, x.len, x.rangeLb, x.rangeUb, 0);
    if (x.next == null) {
      var xfpo: Set<Node> := {};
      var xfm := { n: Node :: { n1: Node :: domZero() } };
      I := int(inflow(x, x.rangeLb, x.rangeUb),
               nodeabs(x, x.next, x.keys.map, x.ptrs.map, x.len,
                       inflow(x, x.rangeLb, x.rangeUb),
                       set_of_map(x.keys.map, 0, x.len), x.len),
               xfm, {x}, xfpo);
      lemma_int_valid_fold(x, I);
      return I;
    } else {
      var xfpo: Set<Node> := {x.next};
      var xfm := { n: Node :: { n1: Node ::
        n != x ? domZero()
        : (n1 == x.next ? fm_next(x, x.next, x.keys.map, x.len) : domZero())}};
      I := int(inflow(x, x.rangeLb, x.rangeUb),
               nodeabs(x, x.next, x.keys.map, x.ptrs.map, x.len,
                       inflow(x, x.rangeLb, x.rangeUb),
                       set_of_map(x.keys.map, 0, x.len), x.len),
               xfm, {x}, xfpo);
      lemma_int_valid_fold(x, I);
      return I;
    }
  } else { // Internal
    I := lemma_int_ind_is_valid(x, x.next, x.keys.map, x.ptrs.map, x.len,
                                x.rangeLb, x.rangeUb, x.len);
    return I;
  }
}

lemma lemma_int_stable(x: Node, i: Int)
  requires hrepSpatial(x)
  requires 0 <= x.len && 0 <= i
  ensures hrepSpatial(x) &*& unchanged(x)
  ensures i >= x.len
    ==> fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, i)
      == fm_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, x.len)
  ensures i >= x.len
    ==> FPo_ind(x, x.next, x.ptrs.map, x.len, i)
      == FPo_ind(x, x.next, x.ptrs.map, x.len, x.len)
  ensures i >= x.len
    ==> int_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, x.rangeLb, x.rangeUb, i)
      == int_ind(x, x.next, x.keys.map, x.ptrs.map, x.len, x.rangeLb, x.rangeUb, x.len)
{
  if (i > x.len) {
    lemma_int_stable(x, i-1);
  }
}

lemma keyset_implies_leaf(x: Node, Ix: Interface, k: K, i: Int)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  requires (i <= 0 || le(x.keys[i-1], k)) && 0 <= i <= x.len
  ensures hrep(x, Ix) &*& unchanged(x)
  ensures x.ptrs[0] == null  // x is a leaf
{
  if (x.ptrs[0] != null) {
    lemma_fm(x, Ix, i, x.len);
    if (i < x.len && !lt(k, x.keys[i])) {
      keyset_implies_leaf(x, Ix, k, i + 1);
    }
    pure assert i == x.len
      ==> Ix.fm[x][x.ptrs[i]].ks[k] >= 1;
    pure assert false; // TODO why is this necessary?!
  }
}


/** Lemmas needed by Coq */

lemma inreach_impl_inset(n: Node, In: Interface, k: K)
  requires k in In.na.inr.inrfn[n]
  requires k !in In.na.outs && intValid(In) && In.FP == {n}
  ensures In.inf[n].ks[k] > 0
{
  lemma_int_valid_unfold(n, In);
  pure assert In.inf[n].ks[k] >= 1 || In.inf[n].ir[k] >= 1;
}

lemma flowint_inset_step(I: Interface, x: Node, Ix: Interface, y: Node, Iy: Interface, k: K)
  requires Ix.FP == {x} && Iy.FP == {y} && I == intComp(Ix, Iy) && intValid(I)
  requires Ix.inf[x].ks[k] >= 1 && Ix.fm[x][y].ks[k] >= 1
  ensures Iy.inf[y].ks[k] >= 1
{
  pure assert domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k]
    && Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k] != 0;
  pure assert !domEq(domMult(Ix.inf[x], Ix.fm[x][y]), domZero());
  lemma_acyclic_2(x, Ix, y, Iy);
  lemma_int_comp_unfold(x, Ix, y, Iy, I);
  lemma_int_valid_unfold_I(I);
  pure assert Iy.inf[y].ks[k] == domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ks[k]
    && domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ks[k]
      == I.inf[y].ks[k] + domMult(Ix.inf[x], Ix.fm[x][y]).ks[k]
    && domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k];
}

lemma flowint_inreach_step(I: Interface, x: Node, Ix: Interface, y: Node, Iy: Interface, k: K)
  requires Ix.FP == {x} && Iy.FP == {y} && I == intComp(Ix, Iy) && intValid(I)
  requires k in Ix.na.inr.inrfn[x] && Ix.fm[x][y].ks[k] >= 1
  ensures k in Iy.na.inr.inrfn[y]
{
  lemma_int_valid_unfold(x, Ix);
  lemma_int_valid_unfold(y, Iy);
  lemma_int_valid_unfold_I(I);
  
  pure assert domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k]
    &&  domMult(Ix.inf[x], Ix.fm[x][y]).ir[k] == Ix.inf[x].ir[k] * Ix.fm[x][y].ir[k]
    && (Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k] != 0 || Ix.inf[x].ir[k] * Ix.fm[x][y].ir[k] != 0) ;
  pure assert !domEq(domMult(Ix.inf[x], Ix.fm[x][y]), domZero());
  lemma_acyclic_2(x, Ix, y, Iy);
  lemma_int_comp_unfold(x, Ix, y, Iy, I);

  pure assert Iy.inf[y].ks[k] == domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ks[k]
    && domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ks[k]
      == I.inf[y].ks[k] + domMult(Ix.inf[x], Ix.fm[x][y]).ks[k]
    && domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k];
  pure assert Iy.inf[y].ir[k] == domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ir[k]
    && domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ir[k]
      == I.inf[y].ir[k] + domMult(Ix.inf[x], Ix.fm[x][y]).ir[k]
    && domMult(Ix.inf[x], Ix.fm[x][y]).ir[k] == Ix.inf[x].ir[k] * Ix.fm[x][y].ir[k];
}

lemma flowint_proj(I: Interface, x: Node, Ix: Interface, Iy: Interface, k: K)
  requires I == intComp(Ix, Iy) && intValid(I) && x in Ix.FP
  requires I.inf[x].ks[k] >= 1
  ensures Ix.inf[x].ks[k] >= 1
{
  lemma_proj(x, Ix, Iy, I);
}

lemma flowint_cont(I: Interface, Im: Interface, I1: Interface, m: Node)
  requires I1 == intComp(I, Im) && intValid(I1) && Im == newInt(m)
  ensures I.na.contents == I1.na.contents
{}

lemma flowint_step(I1: Interface, I2: Interface, I: Interface, x: Node, y: Node, k: K)
  requires I == intComp(I1, I2) && intValid(I) && x in I1.FP && I.FPo == {}
  requires I1.fm[x][y].ks[k] >= 1
  ensures y in I2.FP
{
  lemma_int_valid_unfold_I(I1);
  lemma_step(I1, I2, I, x, y);
}


/** Begin programs */

/** Initialize root note */
procedure init() returns (x: Node, I: Interface)
  ensures hrep(x, I) &*& intValid(I) == true
{
  x := new Node;
  x.keys := new Array<K>(2*B);
  x.keys[0] := bottom;
  x.ptrs := new Array<Node>(2*B);
  x.ptrs[0] := null;
  x.len := 0;
  x.next := null;
  x.rangeLb := bottom;
  x.rangeUb := top;

  I := compute_int(x);
}

/** findNext */
procedure findNext(x: Node, k: K, Ix: Interface)
  returns (n: Node)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  ensures hrep(x, Ix)
  ensures n != null ==> Ix.fm[x][n].ks[k] >= 1
  ensures n == null ==> (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
{
  if (x.ptrs[0] == null) {  // Leaf node
    if (x.next == null) {
      lemma_int_valid_unfold(x, Ix);
      return null;
    }
    if (le(x.keys[x.len], k)) {
      return x.next;
    } else {
      lemma_int_valid_unfold(x, Ix);
      pure assert forall y: Node :: y in Ix.FPo ==> Ix.fm[x][y].ks[k] == 0;
      pure assert forall y: Node :: y !in Ix.FPo ==> Ix.fm[x][y].ks[k] == 0;
      return null;
    }
  }

  var found, i := arr_find(x.keys, x.len, k);

  if (i < x.len && k == x.keys[i]) {  // arr_find finds upper bound, we want lower
    i := i + 1;
  }

  lemma_fm(x, Ix, i, x.len);
  if (i == x.len && x.next != null) {
    if (lt(k, x.keys[i]))
      n := x.ptrs[i];
    else
      n := x.next;
  } else {
    pure assert Ix.fm[x][x.ptrs[i]].ks[k] >= 1;
    n := x.ptrs[i];
  }
  // return n;
}


/** member */
procedure member(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents && (res == k in Ix.na.contents))
{
  keyset_implies_leaf(x, Ix, k, 0);

  var idx: Int;
  res, idx := arr_find(x.keys, x.len, k);

  return true, res, Ix;
}


/** insert */
procedure insert(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix1)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents ++ {k} && (res == k !in Ix.na.contents))
{
  keyset_implies_leaf(x, Ix, k, 0);

  if (x.len < 2*B - 1) {
    ghost var m0 := x.keys.map;
    if (x.next != null) {
      x.keys[x.len + 1] := x.keys[x.len];
      set_of_map_equal(m0, x.keys.map, 0, 0, x.len);
    } else {
      x.keys[x.len + 1] := top;
      set_of_map_equal(m0, x.keys.map, 0, 0, x.len);
    }
    ghost var m := x.keys.map; var old_len := x.len;

    var idx, new_len := arr_insert(x.keys, k, x.len);
    x.len := new_len;

    map_insert_content_set(m, x.keys.map, idx, k, old_len, new_len);
    lemma_int_valid_unfold(x, Ix);
    Ix1 := copy_interface(Ix, nodeabs(x, x.next, x.keys.map, x.ptrs.map, x.len,
                          inflow(x, x.rangeLb, x.rangeUb),
                          set_of_map(x.keys.map, 0, x.len), x.len));
    lemma_int_valid_fold(x, Ix1);

    return true, k !in Ix.na.contents, Ix1;
  } else {
    return false, false, Ix;
  }
}


/** delete */
procedure delete(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix1)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents -- {k} && (res == k in Ix.na.contents))
{
  keyset_implies_leaf(x, Ix, k, 0);

  ghost var m := x.keys.map;

  var new_len, idx := arr_delete(x.keys, k, x.len);

  map_delete_content_set(m, x.keys.map, x.len, new_len, idx, k);

  ghost var m1 := x.keys.map;
  x.keys[new_len] := x.keys[x.len];
  set_of_map_equal(m1, x.keys.map, 0, 0, new_len);

  x.len := new_len;

  // Define Ix1 to be Ix, but with k removed from contents
  Ix1 := copy_interface(Ix, nd(Ix.na.contents -- {k}, Ix.na.inr, Ix.na.outs));
  lemma_int_valid_unfold(x, Ix);
  lemma_int_valid_fold(x, Ix1);

  return true, (k in Ix.na.contents), Ix1;
}

