/** B+ tree implementation of the give-up template for linearizable dictionaries. */

options "-simplearrays -propreads -procedure init"

include "flows.spl"
include "array_util.spl"


/** Flow and node domain definitions */

datatype FlowDom = fd(ks: Map<K, Int>, pc: Int)
/* We use an extra path counting flow domain to prove that all keys of a node
   come from its parent. This is needed by the split maintenance operation. */


/*
define domEq(p1, p2) {
  p1.pc == p2.pc && p1.ks == p2.ks
  (forall k: K :: p1.ks[k] == p2.ks[k]
  @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
} */


pure predicate domLeq(p1: FlowDom, p2: FlowDom) {
  p1.pc <= p2.pc && (forall k: K :: p1.ks[k] <= p2.ks[k]
    @(matching p1.ks[k] yields p2.ks[k]) @(matching p2.ks[k] yields p1.ks[k]))
}

pure function domPlus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
{
  fd({k: K :: p1.ks[k] + p2.ks[k]}, p1.pc + p2.pc)
}

    
pure function domMult(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)
{
  fd({ k: K :: p1.ks[k] * p2.ks[k]}, p1.pc * p2.pc)
}

pure function domZero() returns(p: FlowDom)
{
  fd({k: K :: 0}, 0)
}

datatype NodeDom = nd(contents: Set<K>);

pure predicate ndLeq(a1: NodeDom, a2: NodeDom) {
  a1.contents subsetof a2.contents
}

pure function ndJoin(a1: NodeDom, a2: NodeDom) returns (a: NodeDom)
{
  nd(a1.contents ++ a2.contents)
}

pure function ndBot() returns (a: NodeDom)
{
  nd({})
}


/** Definition of a node */

struct Node {
  var len: Int;
  var rangeLb: K;
  var rangeUb: K;
  var keys: Array<K>;
  var ptrs: Array<Node>;
}

define unchanged(x) {
  x.len == old(x.len) && x.rangeLb == old(x.rangeLb)
    && x.rangeUb == old(x.rangeUb) && x.keys == old(x.keys) && x.ptrs == old(x.ptrs)
    && x.keys.length == old(x.keys.length) && x.keys.map == old(x.keys.map)
    && x.ptrs.length == old(x.ptrs.length) && x.ptrs.map == old(x.ptrs.map)
}


/** Definition of heap representation, hrep */

var B: Int
axiom B > 1

define hrepSpatial(x) {
  acc(x) &*& acc(x.keys) &*& acc(x.ptrs)
}

define hrep(x, I) {
  hrepSpatial(x) &*& I.FP == {x} // TODO where to put this?
    && 0 <= x.len && x.len < 2*B && x.keys.length == 2*B && x.ptrs.length == 2*B
    && (lt(x.rangeLb, x.rangeUb) ==> I.inf[x].pc == 1)  // inset != {} ==> pc == 1
    // edgeset != {} ==> pc == 1
    && (forall n: Node, n1: Node, k: K :: I.fm[n][n1].ks[k] >= 1 ==> I.fm[n][n1].pc == 1)
    // The keys are within the range
    && (x.len != 0 ==> le(x.rangeLb, x.keys[0]) && lt(x.keys[x.len-1], x.rangeUb))
    // The range defines the inset
    && (forall k: K :: I.inf[x].ks[k] == 1 && le(x.rangeLb, k) && lt(k, x.rangeUb)
    || I.inf[x].ks[k] == 0 && (lt(k, x.rangeLb) || le(x.rangeUb, k)))
    // Keys are sorted
    && (forall i: Int, j: Int :: 0 <= i < j < x.len ==> lt(x.keys[i], x.keys[j]))
    && (x.ptrs[0] == null && I.FPo == {}  // Leaf
       && I.na.contents == set_of_map(x.keys.map, 0, x.len)
     || x.ptrs[0] != null  // Internal
       && I.na.contents == {}
       && (forall i: Int :: 0 <= i <= x.len ==> x != x.ptrs[i])
       && (forall i: Int, j: Int :: 0 <= i < j <= x.len ==> x.ptrs[i] != x.ptrs[j])
       && (forall i: Int :: 0 <= i <= x.len ==> x.ptrs[i] != null && x.ptrs[i] in I.FPo)
       && (forall i: Int, k: K :: 0 <= i <= x.len ==>
          (I.fm[x][x.ptrs[i]].ks[k] == 1
          && ((0 < i ==> le(x.keys[i-1], k)) && (i < x.len ==> lt(k, x.keys[i])))
           || I.fm[x][x.ptrs[i]].ks[k] == 0
           && !((i <= 0 || le(x.keys[i-1], k)) && (i >= x.len || lt(k, x.keys[i]))))
          @(matching x.ptrs[i] yields x.keys[i - 1])
          @(matching x.ptrs[i] yields x.keys[i]))
          //       && (forall i: Int :: 0 <= i <= x.len ==> I.fm[x][x.ptrs[i]].pc == 1)
       )
}

// The good condition
define nu(x, I) {
    // Contents subsetof keyset
    (forall k: K :: k in I.na.contents ==> I.inf[x].ks[k] >= 1)
    && (forall k: K, y: Node :: k !in I.na.contents || I.fm[x][y].ks[k] == 0)
    // Edgesets are disjoint
    && (forall k: K, y: Node, z: Node :: y == z
       || I.fm[x][y].ks[k] == 0 || I.fm[x][z].ks[k] == 0)
}

lemma keyset_implies_leaf(x: Node, Ix: Interface, k: K, i: Int)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  requires (i <= 0 || le(x.keys[i-1], k)) && 0 <= i <= x.len
  ensures hrep(x, Ix) &*& unchanged(x)
  ensures x.ptrs[0] == null  // x is a leaf
{
  if (x.ptrs[0] != null) {
    if (i < x.len) {
      if (lt(k, x.keys[i])) {
        pure assert Ix.fm[x][x.ptrs[i]].ks[k] == 1;
      } else {
        keyset_implies_leaf(x, Ix, k, i + 1);
      }
    } else {
      pure assert Ix.fm[x][x.ptrs[i]].ks[k] == 1;
    }
  }
}


/** Lemmas needed by Coq */

lemma flowint_inset_step(I: Interface, x: Node, Ix: Interface, y: Node, Iy: Interface, k: K)
  requires Ix.FP == {x} && Iy.FP == {y} && I == intComp(Ix, Iy) && intValid(I)
  requires Ix.inf[x].ks[k] >= 1 && Ix.fm[x][y].ks[k] >= 1
  ensures Iy.inf[y].ks[k] >= 1
{
  pure assert domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k]
    && Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k] != 0;
  pure assert !domEq(domMult(Ix.inf[x], Ix.fm[x][y]), domZero());
  lemma_acyclic_2(x, Ix, y, Iy);
  lemma_int_comp_unfold(x, Ix, y, Iy, I);
  lemma_int_valid_unfold_I(I);
  pure assert Iy.inf[y].ks[k] == domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ks[k]
    && domPlus(I.inf[y], domMult(Ix.inf[x], Ix.fm[x][y])).ks[k]
      == I.inf[y].ks[k] + domMult(Ix.inf[x], Ix.fm[x][y]).ks[k]
    && domMult(Ix.inf[x], Ix.fm[x][y]).ks[k] == Ix.inf[x].ks[k] * Ix.fm[x][y].ks[k];
}

lemma flowint_proj(I: Interface, x: Node, Ix: Interface, Iy: Interface, k: K)
  requires I == intComp(Ix, Iy) && intValid(I) && x in Ix.FP
  requires I.inf[x].ks[k] >= 1
  ensures Ix.inf[x].ks[k] >= 1
{
  lemma_proj(x, Ix, Iy, I);
}

lemma flowint_cont(I: Interface, Im: Interface, I1: Interface, m: Node)
  requires I1 == intComp(I, Im) && intValid(I1) && Im == newInt(m)
  ensures I.na.contents == I1.na.contents
{}

lemma flowint_step(I1: Interface, I2: Interface, I: Interface, x: Node, y: Node, k: K)
  requires I == intComp(I1, I2) && intValid(I) && x in I1.FP && I.FPo == {}
  requires I1.fm[x][y].ks[k] >= 1
  ensures y in I2.FP
{
  lemma_int_valid_unfold_I(I1);
  lemma_step(I1, I2, I, x, y);
}


/** Begin programs */

/** Initialize root node */
procedure init() returns (x: Node, I: Interface)
  ensures hrep(x, I) &*& intValid(I) == true
{
  x := new Node;
  x.keys := new Array<K>(2*B);
  x.ptrs := new Array<Node>(2*B);
  arr_init_node(x.ptrs, 2*B, null);
  x.len := 0;
  x.rangeLb := bottom;
  x.rangeUb := top;
  
  var xkc := { k: K :: le(bottom, k) && lt(k, top) ? 1 : 0 };
  var xfm := { n: Node :: { n1: Node :: domZero } };
  I := int({ n: Node :: n == x ? fd(xkc, 1) : domZero },
            nd({}), xfm, {x}, {});
  lemma_int_valid_fold(x, I);
}

/** inRange */
procedure inRange(x: Node, k: K, Ix: Interface)
  returns (res: Bool)
  requires hrep(x, Ix)
  ensures hrep(x, Ix) &*& (res ==> Ix.inf[x].ks[k] >= 1)
{
  return le(x.rangeLb, k) && lt(k, x.rangeUb);
}


/** findNext */
procedure findNext(x: Node, k: K, Ix: Interface)
  returns (n: Node)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  ensures hrep(x, Ix)
  ensures n != null ==> Ix.fm[x][n].ks[k] >= 1
  ensures n == null ==> (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
{
  if (x.ptrs[0] == null) {  // Leaf node
    lemma_int_valid_unfold(x, Ix);
    return null;
  }
  
  var found, i := arr_find(x.keys, x.len, k);

  if (i < x.len && k == x.keys[i]) {
    i := i + 1;
  }
  
  n := x.ptrs[i];
  // return n;
}


/** member */
procedure member(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents && (res == k in Ix.na.contents))
{
  keyset_implies_leaf(x, Ix, k, 0);

  var idx: Int;
  res, idx := arr_find(x.keys, x.len, k);

  return true, res, Ix;
}


/** insert */
procedure insert(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix1)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents ++ {k} && (res == k !in Ix.na.contents))
{
  keyset_implies_leaf(x, Ix, k, 0);

  if (x.len < 2*B - 1) {
  
    ghost var m := x.keys.map;

    var idx, new_len := arr_insert(x.keys, k, x.len);
    // TODO argument order consistent

    map_insert_content_set(m, x.keys.map, idx, k, x.len, new_len);

    x.len := new_len;

    // Define Ix1 to be Ix, but with k added to contents
    Ix1 := copy_interface(Ix, nd(Ix.na.contents ++ {k}));
    lemma_int_valid_unfold(x, Ix);
    lemma_int_valid_fold(x, Ix1);

    return true, k !in Ix.na.contents, Ix1; 
  } else {
    return false, false, Ix;
  }
}


/** delete */
procedure delete(x: Node, k: K, Ix: Interface)
  returns (succ: Bool, res: Bool, Ix1: Interface)
  requires hrep(x, Ix) &*& intValid(Ix) == true
  requires Ix.inf[x].ks[k] == 1 && (forall y: Node :: Ix.fm[x][y].ks[k] == 0)
  ensures hrep(x, Ix1)
  ensures intEq(Ix, Ix1) == true
  // decisiveOpSpec(x, Ix1, res, k):
  ensures succ ==> (Ix1.na.contents == Ix.na.contents -- {k} && (res == k in Ix.na.contents))
{
  keyset_implies_leaf(x, Ix, k, 0);

  ghost var m := x.keys.map;

  var new_len, idx := arr_delete(x.keys, k, x.len);

  map_delete_content_set(m, x.keys.map, x.len, new_len, idx, k);

  x.len := new_len;

  // Define Ix1 to be Ix, but with k removed from contents
  Ix1 := copy_interface(Ix, nd(Ix.na.contents -- {k}));
  lemma_int_valid_unfold(x, Ix);
  lemma_int_valid_fold(x, Ix1);

  return true, (k in Ix.na.contents), Ix1;
}

